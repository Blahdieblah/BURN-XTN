{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}

func tryGetInteger (address:Address, key:String) = match getInteger(address, key) {
    case b: Int => 
        b
    case _ => 
        0
}

func tryGetString (address:Address, key:String) = match getString(address, key) {
    case b: String => 
        b
    case _ => 
        ""
}

let d6 = 1000000
let d8 = 100000000

#let selector = Address(base58'3PAucbbumdUXmhzcR421zGiayphEdo2tRoz') # live
let selector = Address(base58'3PCBL2vbjAVFbiCwmGsPmT6QdATutQnM8ov') # test

let xtn = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let burnxtn = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let burnxtnString = toBase58String(burnxtn)
let waves = base58'WAVES'
let wx = base58'Atqv59EYzjFGuitKVnMRk6H8FukjoV3ktPorbEys25on'
let westId = base58'4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8'
let viresId = base58'DSbbhLsSTeDg5Lsiufk2Aneh3DjVqJuPr2M9uU1gwy5p'
let eggId = base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
let surfId = base58'At8D6NFFpheCbvKVnjVoeLL84Eo8NZn6ovManxfLaFWL'
let nsbtId = base58'6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g'
let wxId = base58'Atqv59EYzjFGuitKVnMRk6H8FukjoV3ktPorbEys25on'
let swopId = base58'Ehie5xYpeN8op1Cctc6aGUrqx8jq3jtf1DSjXDbfm7aT'

let keyAddressesRegistered = "Addresses registered-"
let addresses = dropRight(tryGetString(this, keyAddressesRegistered), 1)
let keyAmountRegistered = "Amount Registered-"
let keyParticipants = "participants list string-"
let keyTotalBalanceCount = "total balance count-"
let keyBurnxtnBalance = "BURN-XTN balance-"

let puzzleMarket = Address(base58'3P6fAxtw12pjFhayEfpcUWxgu2BHVCeP78A')
let NFT = Address(base58'3PEgVPqJ3NYWbRn1CLELUpuY9KCmragc7sY')
let WFSlist = ["Gnpy5nVajPP3XQQVxrHboMAsXtjnyWAxybMDdKrbr8sD", "BT9Q4mQdQQmei2r5YNMBMasZBQj7myNaiz6QHba5cPXS", "BMvkyFtPVmFatpFR9QVFKR5MYTcZVTY2VUwFZ25vrAAc", "77Rqu8TLjBdMtDuXd9o5fUSGo64zQe5FCcao5L8Ht9j8", "8KnhBLV49SDJzq1SSy1YvGHYY6m7Q146bV7Q6GKqQb5C", "FFxsUfKbHEW4zZywLUL55ip8Nqp6fcWDsq7y3an9yQhe", "5nQRedGHoVpEQasMQivb1UMvFBCHXefXPXtURbMMnfsu", "6N3MSFtJGvT79ucX4pLftxP7fGs8DnmYdPedvnoNbVt9", "dFC2iJL4LDWasq9YzHf2kWfPNP69Tyamii93ns9BHvM", "A158T7yZLtmuiMEs21P9jV2ftbMXzy3MnfHMEu1eMAGK"]
let BBBlist = ["9pCxoGtD18GeH9gCemzqrjHMMjfyBQDfsrRAuxSRagMc", "7DgFgCkBjVDc5P9ZgwsVL9SiTi7kXJuS4aRVgb7ZHW3k", "76bTvE8ttHvsuN1FuH4Kc8QUW4kL4m8c1cjfsXy2GfbV", "4Zrf4H5tiFcQL8eQmnA2wJ1XWPEBH6h1G2MefZDYmcCB", "2DtC4nFnxz5UM6mbjPwMVZpQWZFUqxs52oZrBeNRk9Ao", "DjZGMAFfoQWkMW3S5FTsQN3joncZt6BsmhnEK3ggLxmN", "BneaZXD6ovDJcV5rgfr8hsHZaMQsJQ8DH6a5gTnGCpBc", "4EKfgzFkd5UGKrjnaJV3w7argW1YmF4hq54xWQFzAXb9", "8hGDkWKiu2igDpWT3Hpr4mchDD6xwJ9hGm2h2jnUvTqz", "E3ZnSejpXL1Xr6VG4QoLh8xod9NMgpPe473r9Qk2HibL"]

let PZ1 = base58'3PE7NtJdmVq4yo47LKDqurQ8RLDCouvJCPB' #BURN-XTN
let PZ2 = base58'3PQHndCUVrv3wBuQjbvVP9SnGmfbfitGxfx' #BURN-XTN x PepeTeam
let PZ3 = base58'3PBiMQLnX8wd4bssXCgF8KuUqHv1H4zWHGi' #Mega volatile gang
let PZ4 = base58'3PDJPGn6vBEBqWN4E3fNcxoKBoDXbsmoaM7' #BURN-XTN / Puzzle
#let PZ5 = base58'3PCS1xhGQi2eM5mYcCBhUSHvB31Kk5gZoCm' #Only good vibes
#let PZ6 = base58'3P8Quvmgt3VEWAjBR3bsfgCqzUh7zTmTC4q' #lmao what a pool
let PZ7 = base58'3PQpQHGEVvMKCzHCP2R2rq7LvfB2Zzmx2Db' #Scarcity pool
#let PZ8 = base58'3PJEUtmcUTUj4UVgEPQi8Un5rpKvR4pFW5F' #Dragon pool
let PZ9 = base58'3P9VPwVfNj3dDevQZt1Z951A4K57cmQmCgk' #BBB & WFS

let WXstake = base58'3PPNhHYkkEy13gRWDCaruQyhNbX2GrjYSyV'
let WX1 = base58'3P5vwLbXddLWpsRspftMxLuzfsjk3dLT3n5' #BURN-XTN/WAVES
let LP1 = "GyiHdcN59sZ46baFvj68ruLngrTPEvWDtsd6jHm4o46n"
let WX2 = base58'3PKXseWa31VUSWUvm2YiRKxW2VM9RsVk3ry' #BURN-XTN/PETE
let LP2 = "3MPHMJVwYGyeBLRsH1RsYhrTmemv752AEBwuFFV7g49Z"
let WX3 = base58'3PKkWhWS4wUPHi8gGwYVRu7tCCmRUriK6aC' #BURN-XTN/XTN
let LP3 = "7BLynNvde1NTBbaivX9zj1h1rrN9L1kWeWkFzpFhpJBz"

func PZbal(Pooladdress:ByteVector, address:Address, asset:ByteVector) = {
    let burnxtnInPZ = tryGetInteger(Address(Pooladdress), ("global_" + toBase58String(asset)) + "_balance")
    let addressStakePZ = tryGetInteger(Address(Pooladdress), (toString(address) + "_indexStaked"))
    let totalStakePZ = tryGetInteger(Address(Pooladdress), ("global_poolToken_amount"))
    fraction(burnxtnInPZ, addressStakePZ, totalStakePZ)
}

func WXbal(Pooladdress:ByteVector, address:Address, LPstr:String) = {
    let burnxtnInWX = assetBalance(Address(Pooladdress), burnxtn)
    let addressStakeWX = tryGetInteger(Address(WXstake), "%s%s%s__staked__" + toString(address) + "__" + LPstr)
    let totalStakeWX = tryGetInteger(Address(WXstake), "%s%s%s__staked__total__" + LPstr)
    fraction(burnxtnInWX, addressStakeWX, totalStakeWX)
}

func totalBalance(address:Address)= {
    let PZ1balance = fraction(PZbal(PZ1, address, burnxtn), (10000 - tryGetInteger(Address(PZ1), "static_" + toBase58String(burnxtn) + "_weight")), 10000)
    let PZ2balance = fraction(PZbal(PZ2, address, burnxtn), (10000 - tryGetInteger(Address(PZ2), "static_" + toBase58String(burnxtn) + "_weight")), 10000)
    let PZ3balance = fraction(PZbal(PZ3, address, burnxtn), (10000 - tryGetInteger(Address(PZ3), "static_" + toBase58String(burnxtn) + "_weight")), 10000)
    let PZ4balance = fraction(PZbal(PZ4, address, burnxtn), (10000 - tryGetInteger(Address(PZ4), "static_" + toBase58String(burnxtn) + "_weight")), 10000)
    #let PZ5balance = fraction(PZbal(PZ5, address, burnxtn), (10000 - tryGetInteger(Address(PZ5), "static_" + toBase58String(burnxtn) + "_weight")), 10000)
    #let PZ6balance = fraction(PZbal(PZ6, address, burnxtn), (10000 - tryGetInteger(Address(PZ6), "static_" + toBase58String(burnxtn) + "_weight")), 10000)
    let PZ7balance = fraction(PZbal(PZ7, address, burnxtn), (10000 - tryGetInteger(Address(PZ7), "static_" + toBase58String(burnxtn) + "_weight")), 10000)
    #let PZ8balance = fraction(PZbal(PZ8, address, burnxtn), (10000 - tryGetInteger(Address(PZ8), "static_" + toBase58String(burnxtn) + "_weight")), 10000)
    let PZ9balance = fraction(PZbal(PZ9, address, burnxtn), (10000 - tryGetInteger(Address(PZ9), "static_" + toBase58String(burnxtn) + "_weight")), 10000)
    let WX1balance = fraction(WXbal(WX1, address, LP1), 50, 100)
    let WX2balance = fraction(WXbal(WX2, address, LP2), 50, 100)
    let WX3balance = fraction(WXbal(WX3, address, LP3), 50, 100)
    PZ1balance + PZ2balance + PZ3balance + PZ4balance 
    #+ PZ5balance + PZ6balance 
    + PZ7balance #+ PZ8balance 
    + PZ9balance
    + WX1balance + WX2balance + WX3balance
}

func rewardAmount(address:String)={
    func foldFunc(acc:Int, WFS:String) = acc + assetBalance(addressFromStringValue(address), fromBase58String(WFS))
    + if (tryGetString(puzzleMarket, "nft_" + WFS + "_seller") == address) then 1 else 0
    let shareWFS = FOLD<10>(WFSlist, 0, foldFunc)
    let WFSbonus = if shareWFS > 0 then 1 else 0 

    func foldFuncB(acc:Int, BBB:String) = acc + assetBalance(addressFromStringValue(address), fromBase58String(BBB))
    + if (tryGetString(puzzleMarket, "nft_" + BBB + "_seller") == address) then 1 else 0
    let shareBBB = FOLD<10>(BBBlist, 0, foldFuncB)
    let BBBbonus = if shareBBB > 0 then 9 else 0
    
    fraction(tryGetInteger(this, keyBurnxtnBalance), 
    ((100 + WFSbonus + BBBbonus) * tryGetInteger(this, address)), 
    (110 * tryGetInteger(this, keyTotalBalanceCount)))
}

@Callable(i)
func register()= 
if (contains(tryGetString(this, keyAddressesRegistered), toString(i.caller))) then throw("already registered") else
if tryGetInteger(this, keyAmountRegistered) >= 76 then throw("max registered users") else
{
  [
    IntegerEntry(keyAmountRegistered, tryGetInteger(this, keyAmountRegistered) + 1),
    StringEntry("Register liquidity mining bounty: " + toString((tryGetInteger(this, keyAmountRegistered) +1)), toString(i.caller)),
    StringEntry(keyAddressesRegistered, (tryGetString(this, keyAddressesRegistered) + toString(i.caller) + ","))
  ]
}

@Callable(i)
func invokeAll()=
if (i.caller != this) then throw("access only by project owner") else
{
  strict update = invoke(this, "updateBalanceEntry", [], [])
  strict claim = invoke(this, "claimSwap", [], [])
  strict total = invoke(this, "totalBalanceAll", [], [])
  strict pay = invoke(this, "payRewards", [], [])
  []
}

@Callable(i)
func updateBalanceEntry()=
if (i.caller != this && i.caller != selector) then throw("access only by project owner") else
{
    let list = split_4C((addresses), ",")
    func bal(accum:List[IntegerEntry], address:String)=
    {accum ++ [IntegerEntry(address, totalBalance(addressFromStringValue(address)))]}
    let updateBalance = {FOLD<76>(list, nil, bal)}
    [] ++ updateBalance
}

@Callable(i)
func claim()=
if (i.caller != this && i.caller != selector) then throw("access only by project owner") else
{
    strict claimInv = invoke(Address(PZ1), "claimIndexRewards", [], [])
    []
}

@Callable(i)
func swap()=
if (i.caller != this && i.caller != selector) then throw("access only by project owner") else
{
    strict swest = invoke(Address(PZ1), "swap", [burnxtnString,0], [AttachedPayment(westId,assetBalance(this, westId))])
    strict svires = invoke(Address(PZ1), "swap", [burnxtnString,0], [AttachedPayment(viresId,assetBalance(this, viresId))])
    strict segg = invoke(Address(PZ1), "swap", [burnxtnString,0], [AttachedPayment(eggId,assetBalance(this, eggId))])
    strict ssurf = invoke(Address(PZ1), "swap", [burnxtnString,0], [AttachedPayment(surfId,assetBalance(this, surfId))])
    strict snsbt = invoke(Address(PZ1), "swap", [burnxtnString,0], [AttachedPayment(nsbtId,assetBalance(this, nsbtId))])
    strict swx = invoke(Address(PZ1), "swap", [burnxtnString,0], [AttachedPayment(wxId,assetBalance(this, wxId))])
    strict sswop = invoke(Address(PZ1), "swap", [burnxtnString,0], [AttachedPayment(swopId,assetBalance(this, swopId))])
    strict sxtn = invoke(Address(PZ1), "swap", [burnxtnString,0], [AttachedPayment(xtn,assetBalance(this, xtn))])
    strict swapwaves = invoke(Address(PZ1), "swap", [burnxtnString,0], [AttachedPayment(unit,if wavesBalance(this).available - d8 > 0 then wavesBalance(this).available - d8 else 0)])
    [IntegerEntry(keyBurnxtnBalance, assetBalance(this, burnxtn))]
}

@Callable(i)
func totalBalanceAll()=
if (i.caller != this && i.caller != selector) then throw("access only by project owner") else
{
    let list = split_4C((addresses), ",")
    func ba(accum:Int, address:String)=
    {accum + totalBalance(addressFromStringValue(address))}
    let enterTotalBalanceAll = {FOLD<76>(list, 0, ba)}
    [IntegerEntry(keyTotalBalanceCount, enterTotalBalanceAll)]
}

@Callable(i)
func payRewards()=
if (i.caller != this && i.caller != selector) then throw("access only by project owner") else{
    let list = split_4C((addresses), ",")
    func pay(accum:List[ScriptTransfer], address:String)=
    {accum ++ [ScriptTransfer(addressFromStringValue(address), rewardAmount(address), burnxtn)]}
    let payReward = {FOLD<76>(list, nil, pay)}
    [] ++ payReward
}
