{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func tryGetInteger (address:Address, key:String)= match getInteger(address, key) {
    case b: Int => 
        b
    case _ => 
        0
}

let keyBurnAmount = "burn amount"
let keyBurnxtnAmount = "burn BURN-XTN amount"
let keyMaxBurn = "max amount burn"
let keyMaxSwap = "max amount swap"
let keyMaxPrice = "max price VVXTNLP/XTN"

let sWsc = Address(base58'3PDPzZVLhN1EuzGy4xAxjjTVkawKDLEaHiV')
let swopWAVESxtn = Address(base58'3PHaNgomBkrvEL2QnuJarQVJa71wjw9qiqG')
let swopXTNsurf = Address(base58'3PLp9KrdrbWAvSFHGJVEaszUubquz3M6mfe')
let invoker = Address(base58'3P1yEqCmumg3rJmuNA39HMav6UxknqtYkb9')
let s = Address(base58'3PKjY3hmP1BCWtmhpXw9Ly85sgiQvpgq4wC')
let vvxtnlpXTNamm = Address(base58'3P9UJxhsqj1UkqPDtM16yi9aGE26V5tdH6i')
let Vvested = Address(base58'3PKZk5TdPCLP2GZviipLFfK46ExTnwkRCBd')

let d6 = 1000000
let d8 = 100000000

let poolBW = base58'3P48ZN6yghcoQaHPtLM9V2hFc5cd4ARd1hc'
let poolSWAVES = base58'3PK4ZxDsRB8pNSuiYbco9K8BchqnhhKwYsq'

let xtnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let burnxtnId = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'

let surfId = base58'At8D6NFFpheCbvKVnjVoeLL84Eo8NZn6ovManxfLaFWL'
let swaves = base58'YiNbofFzC17jEHHCMwrRcpy9MrrjabMMLZxg8g5xmf7'
let vvxtnlp = base58'8KEtor9aSsSj38MknyAE7k1uRThHY9prAXgiE4D7WpyL'
let usdtppt = base58'G5WWWzzVsWRyzGf32xojbnfp7gXbWrgqJT8RcVWEfLmC'

# calculate value of sWAVES to WAVES
let SWAVES_stake = Address(base58'3PDPzZVLhN1EuzGy4xAxjjTVkawKDLEaHiV')
func _loadInt (key_:String,default_:Int) = match getInteger(SWAVES_stake, key_) {
    case a: Int => 
        a
    case _ => 
        default_
}

func _loadBigInt (key_:String,default_:BigInt) = match getBinary(SWAVES_stake, key_) {
    case a: ByteVector => 
        toBigInt(a)
    case _ => 
        default_
}

    let WX_BURNXTN_WAVES = Address(base58'3P5vwLbXddLWpsRspftMxLuzfsjk3dLT3n5')
    let WX_WAVES_USD = Address(base58'3PKfrupEydU2nZAghVjZAfvCwMBkzuR1F52')
    let lastRate = _loadBigInt("LAST_RATE", toBigInt(1000000000000))
    let currentRate = _loadBigInt("CURRENT_RATE", toBigInt(0))
    let lastHeight = _loadInt("LAST_HEIGHT", 0)
    let targetHeight = min([_loadInt("TARGET_HEIGHT", 0), height])
    let lastRateUpdated = (lastRate + (currentRate * toBigInt((targetHeight - lastHeight))))
    let baseAmount = toInt(fraction(toBigInt(assetBalance(WX_BURNXTN_WAVES, swaves)), lastRateUpdated, toBigInt(1000000000000), FLOOR))
    let baseAmount2 = toInt(fraction(toBigInt(assetBalance(WX_WAVES_USD, swaves)), lastRateUpdated, toBigInt(1000000000000), FLOOR))

let wavesInWX = wavesBalance(WX_BURNXTN_WAVES).regular + baseAmount
let burnxtnInWX = assetBalance(WX_BURNXTN_WAVES, burnxtnId)
let burnxtnwavesprice = fraction(d8, wavesInWX, burnxtnInWX)

let wavesInWX2 = wavesBalance(WX_WAVES_USD).regular + baseAmount2
let usdInWX = assetBalance(WX_WAVES_USD, usdtppt)
let wavesusdprice = fraction(d8, usdInWX, wavesInWX2)

let burnxtnusdprice = fraction(burnxtnwavesprice, wavesusdprice, d8)

let ATH = if burnxtnwavesprice > getIntegerValue("ATH in wavelets") then burnxtnwavesprice else getIntegerValue(this, "ATH in wavelets")
let ATHusd = if burnxtnusdprice > getIntegerValue("ATH in centlets") then burnxtnusdprice else getIntegerValue(this, "ATH in centlets")
let pricegrowth = (fraction(d8, burnxtnwavesprice, getIntegerValue(this, "intial price BURN-XTN in wavelets")) - d8) / 1000000

func swapWX(assetIn:ByteVector, assetOut:ByteVector, amountIn:Int) =
  {invoke(Address(base58'3P68zNiufsu1viZpu1aY3cdahRRKcvV5N93'), "swap", [1, toBase58String(assetOut), toString(this)], [AttachedPayment(assetIn, amountIn)])}

func swapAmount(assetid:ByteVector) = 
{if assetBalance(this, assetid) > getIntegerValue(keyMaxSwap) then getIntegerValue(keyMaxSwap) else assetBalance(this, assetid)}

@Callable(i)
func invoke1() = 
if (i.caller != this && i.caller != invoker) then throw("access only by project owner") else 
{
  #strict burnxtnBalanceBefore = assetBalance(this, burnxtnId)
  #strict claimInv = invoke(Address(poolSWAVES), "claimIndexRewards", [], [])
  #let burnxtnDifference = assetBalance(this, burnxtnId) - burnxtnBalanceBefore

  strict claimInvW = invoke(Address(poolBW), "claimIndexRewards", [], [])
  [
  #IntegerEntry(keyBurnxtnAmount, burnxtnDifference),
  #ScriptTransfer(invoker, burnxtnDifference, burnxtnId),
  IntegerEntry("Activated blockheight", height)
  ]
}

@Callable(i)
func invoke2() =
if (i.caller != this && i.caller != invoker) then throw("access only by project owner") else 
{
  strict surfBalanceBefore = assetBalance(this, surfId)
  strict swapXtnSurf = if assetBalance(this, xtnId) >= 5 * tryGetInteger(this, keyBurnAmount) then invoke(swopXTNsurf, "callFunction", ["exchange", ["1"]], [AttachedPayment(xtnId, tryGetInteger(this, keyBurnAmount) * 2)]) else unit
  let surfDifference = (assetBalance(this, surfId) - surfBalanceBefore) / 2

  strict burnxtnBalanceBefore = assetBalance(this, burnxtnId)
  strict swapXtnBurnxtn = if assetBalance(this, xtnId) >= 3 * tryGetInteger(this, keyBurnAmount) then swapWX(xtnId, burnxtnId, tryGetInteger(this, keyBurnAmount) * 2) else unit
  let burnxtnDifference = (assetBalance(this, burnxtnId) - burnxtnBalanceBefore) / 2
  [
  ScriptTransfer(invoker, if assetBalance(this, xtnId) >= tryGetInteger(this, keyBurnAmount) then tryGetInteger(this, keyBurnAmount) else 0, xtnId),
  ScriptTransfer(invoker, surfDifference, surfId),
  ScriptTransfer(invoker, burnxtnDifference, burnxtnId)
  ]
}

@Callable(i) # not invoked
func invoke3() = 
if (i.caller != this && i.caller != invoker) then throw("access only by project owner") else 
{
  #strict withdrawSWAVES = if assetBalance(this, sW) > 0 then invoke(sWsc, "withdraw", [], [AttachedPayment(sW, assetBalance(this, sW))]) else unit
  strict lpWavesXtn = 
    if (fraction(assetBalance(vvxtnlpXTNamm, xtnId), d6, assetBalance(vvxtnlpXTNamm, vvxtnlp)) < tryGetInteger(this, keyMaxPrice)) && (assetBalance(this, xtnId) > d6)
    then swapWX(xtnId, vvxtnlp, assetBalance(this, xtnId))
    else if (assetBalance(this, xtnId) > d6) #&& (wavesBalance(this).available > 2 * d8) 
    #then invoke(swopWAVESxtn, "callFunction", ["replenishWithTwoTokens", ["true", "0"]], [AttachedPayment(unit, wavesBalance(this).regular - d8), AttachedPayment(xtnId, assetBalance(this, xtnId))])
    then invoke(swopWAVESxtn, "callFunction", ["replenishWithOneToken", ["1", "true", "0"]], [AttachedPayment(xtnId, swapAmount(xtnId))])
    else unit
  strict deposit = if wavesBalance(this).available > d8 then invoke(sWsc, "deposit", [], [AttachedPayment(unit, wavesBalance(this).available - d8)]) else unit
  []
}

@Callable(i)
func burnAmount(amount:Int) = # amount per week
if (i.caller != this) && (i.caller != s) then throw("access only by project owner") else
if amount > getIntegerValue(keyMaxBurn) then throw(keyMaxBurn) else 
{[IntegerEntry(keyBurnAmount, amount * d6 / 7)]}

@Callable(i)
func maxAmount(maxBurnInput:Int, maxSwap:Int) =
if (i.caller != this) then throw("access only by project owner") else 
{
  [
  IntegerEntry(keyMaxBurn, maxBurnInput),
  IntegerEntry(keyMaxSwap, maxSwap * d8)
  ]
}

@Callable(i)
func maxPrice(VVXTNLP_XTN:Int) =
if (i.caller != this) then throw("access only by project owner") else 
{
  [IntegerEntry(keyMaxPrice, VVXTNLP_XTN)]
}

@Callable(i)
func projectStats() =
{
  [
  IntegerEntry("BURN-XTN/WAVES price in wavelets", burnxtnwavesprice),
  IntegerEntry("Price growth %", pricegrowth),
  IntegerEntry("ATH in wavelets", ATH),
  IntegerEntry("BURN-XTN/USD price in centlets", burnxtnusdprice),
  IntegerEntry("ATH in centlets", ATHusd),
  IntegerEntry("Waves/USD price", wavesusdprice),
    
  IntegerEntry("XTN total burned", getIntegerValue(invoker, "XTN total burned")),
  IntegerEntry("XTN supply", match assetInfo(xtnId) {
    case asset:Asset =>
        (asset.quantity - assetBalance(Address(base58'3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo'), xtnId)) / d6
    case _ => throw("Can't find asset")
    }),
  IntegerEntry("SURF total burned", tryGetInteger(invoker, "SURF total burned")),
  IntegerEntry("SURF supply", match assetInfo(surfId) {
    case asset:Asset =>
        asset.quantity / d6
    case _ => throw("Can't find asset") }),
  IntegerEntry("BURN-XTN total burned", 1000000000 - match assetInfo(burnxtnId) {
    case asset:Asset =>
        asset.quantity / d8
    case _ => throw("Can't find asset")}),
  IntegerEntry("BURN-XTN supply", match assetInfo(burnxtnId) {
    case asset:Asset =>
        asset.quantity / d8
    case _ => throw("Can't find asset")})
  ]
}

@Callable(i)
func withdraw() = 
if (i.caller != invoker) then throw("no access") else
{
  strict withdraw = 
    if (getIntegerValue(Vvested, toString(this) + "_USDN") > 0) 
    then invoke(Address(base58'3PCbvPVQfSvVu88ip8Fm5YjwJhjEYk1Txhk'), "withdrawVestedAllUSDN", [false, true], [])
    else unit
  strict swapXtnVvxtnlp = 
    if (fraction(assetBalance(vvxtnlpXTNamm, xtnId), d6, assetBalance(vvxtnlpXTNamm, vvxtnlp)) < getIntegerValue(keyMaxPrice)) && (assetBalance(this, xtnId) > 0)
    then swapWX(xtnId, vvxtnlp, assetBalance(this, xtnId))
    else unit
  []
}

@Callable(i)
func importVVXTNLP() =
if (i.caller != invoker) then throw("no access") else
{
  strict import = invoke(Address(base58'3PCbvPVQfSvVu88ip8Fm5YjwJhjEYk1Txhk'), "importLP", [], [AttachedPayment(vvxtnlp, assetBalance(this, vvxtnlp))])
  []
}
