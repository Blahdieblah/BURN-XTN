{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}

let d8 = 100000000

let poolId = base58'3PE7NtJdmVq4yo47LKDqurQ8RLDCouvJCPB'
let poolString = toBase58String(poolId)
let poolBBB = base58'3P9VPwVfNj3dDevQZt1Z951A4K57cmQmCgk'

let xtnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let burnxtnId = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let burnxtnString = toBase58String(burnxtnId)
let whirlpool = base58'73tY3E6Gd5AWYmsuq8m8Kek7KnJNAYyS3GoveTbc6jCi'
let puzzle = base58'HEB8Qaw9xrWpWs8tHsiATYGBWDBtP2S7kcPALrMu43AS'
let rome = base58'AP4Cb5xLYGH6ZigHreCZHoXpQTWDkPsG2BHqfDUx6taJ'

let westId = base58'4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8'
let viresId = base58'DSbbhLsSTeDg5Lsiufk2Aneh3DjVqJuPr2M9uU1gwy5p'
let eggId = base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
let surfId = base58'At8D6NFFpheCbvKVnjVoeLL84Eo8NZn6ovManxfLaFWL'
let nsbtId = base58'6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g'
let wxId = base58'Atqv59EYzjFGuitKVnMRk6H8FukjoV3ktPorbEys25on'
let swopId = base58'Ehie5xYpeN8op1Cctc6aGUrqx8jq3jtf1DSjXDbfm7aT'
let wavesId = base58'WAVES'

let shiller1 = Address(base58'3P3S2ugYddc7invK1FKwXkVehPpj6tjAJC7')
let whirlpoolAddress = Address(base58'3PAkmJniMgnnAej5pYf2jFYkCbZow5pt9tr')
let admin1 = Address(base58'3PHFAavxj2ePJqFB46H2aRGA7oQL6kz1rJJ')
let invoker = Address(base58'3P4AdC9J6MzTEi2LL9xgQN8EimMnbk4d6Nt')
#let admin2 = 

@Callable(i)
func claimRewards() = 
if (i.caller != shiller1 && i.caller != invoker) then throw("no access") else {
  strict claimInv = invoke(Address(poolId), "claimIndexRewards", [], [])
  []
}

@Callable(i)
func shillerRewards() = 
if (i.caller != shiller1 && i.caller != invoker) then throw("no access") else {
  strict sxtn = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(xtnId,assetBalance(this, xtnId))])
  strict swest = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(westId,assetBalance(this, westId))])
  strict svires = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(viresId,assetBalance(this, viresId))])
  strict segg = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(eggId,assetBalance(this, eggId))])
  strict ssurf = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(surfId,assetBalance(this, surfId))])
  strict snsbt = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(nsbtId,assetBalance(this, nsbtId))])
  strict swx = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(wxId,assetBalance(this, wxId))])
  strict sswop = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(swopId,assetBalance(this, swopId))])
  strict swapwaves = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(unit,if wavesBalance(this).available - d8/10 > 0
then wavesBalance(this).available - d8/10
else 0)])
  [ScriptTransfer(shiller1, assetBalance(this, burnxtnId), burnxtnId)]
}

@Callable(i)
func adminRewards() = 
if (i.caller != invoker && i.caller != this) then throw("no access") else {
    strict claimInv = invoke(Address(poolBBB), "claimIndexRewards", [], [])
    strict amountBurnxtn = assetBalance(this, burnxtnId)
    strict amountWhirlpool = assetBalance(this, whirlpool)
    strict amountWaves = if wavesBalance(this).available - d8/10 > 0 then wavesBalance(this).available - d8/10 else 0
    strict amountRome = assetBalance(this, rome)
    strict amountPuzzle = assetBalance(this, puzzle)
    [
    ScriptTransfer(admin1, amountBurnxtn, burnxtnId),
    ScriptTransfer(admin1, amountWhirlpool, whirlpool),
    ScriptTransfer(admin1, amountWaves, unit),
    ScriptTransfer(admin1, amountRome, rome),
    ScriptTransfer(admin1, amountPuzzle, puzzle)
    #,ScriptTransfer(admin2, amountBurnxtn, burnxtnId),
    #ScriptTransfer(admin2, amountWhirlpool, whirlpool),
    #ScriptTransfer(admin2, amountWaves, unit),
    #ScriptTransfer(admin2, amountRome, rome),
    #ScriptTransfer(admin2, amountPuzzle, puzzle)
    ]
}
