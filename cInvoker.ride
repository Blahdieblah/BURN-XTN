{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}

let d8 = 100000000

func tryGetInteger (address:Address, key:String) = match getInteger(address, key) {
    case b: Int => 
        b
    case _ => 
        0
}

let keyInvokeNext = "invoke next"
let keyActivated = "Activated blockheight"
let keyActivated2 = "Activated 2 blockheight"
let keyBotAddress = "bot address string"
let keyActivated3 = "Activated 3 blockheight"
let keyMinImportAmountBurn = "minimum import amount burn"

let d6 = 1000000

let vvxtnlp = base58'8KEtor9aSsSj38MknyAE7k1uRThHY9prAXgiE4D7WpyL'
let xtnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let burnxtnId = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let surfId = base58'At8D6NFFpheCbvKVnjVoeLL84Eo8NZn6ovManxfLaFWL'

let oBurn = Address(base58'3PAucbbumdUXmhzcR421zGiayphEdo2tRoz')
let burn = Address(base58'3PDgtvrFh5aoDDuGUACNSudC6bRafs4DExf') # pcBurn
let bbb = Address(base58'3P6GgqAF4Vv4g2PFsevhKUW7JGtVUfvbULV') # pcBBB
let whi = Address(base58'3PMajWdGe8EXLtdZkAicWSmX2Bqtci99rwN') # pcWhirlpool
let cold = Address(base58'3PAX4yj66rLEGLcK93ZPaBhkwaoujEr7nSC') # pcCold
let pzsc = Address(base58'3PHLhWPrs1mrpM1ZDUv1VmUnZRwchADJELc')
let Vvested = Address(base58'3PKZk5TdPCLP2GZviipLFfK46ExTnwkRCBd')
#let cProjects = Address(base58'3PEttW5oXtd38jVBSLLoTaDL829RJbW7pRb')

let bot = addressFromStringValue(getStringValue(this, keyBotAddress))

let keyVestedUSDN = toString(burn) + "_USDN"

@Callable(i)
func invoker() = 
if i.caller != Address(base58'3PQ23xgnf98t4qDtF5bscxdCDwgYoL7SPeK') && i.caller != Address(base58'3PDcEeHZcvhExJE4CsN2XSSWtPSwNDKWBh5') then throw("no") else
{
  strict inv1a = if (getIntegerValue(Vvested, keyVestedUSDN) > 0) 
    then invoke(burn, "withdraw", [], []) 
    else unit
  strict inv1b = if (assetBalance(burn, vvxtnlp) > getIntegerValue(this, keyMinImportAmountBurn) * d6) 
    then invoke(burn, "importVVXTNLP", [], [])
    else unit
  strict inv2a = invoke(pzsc, "withdraw", [], []) 
  strict inv2b = if (assetBalance(pzsc, vvxtnlp) > getIntegerValue(this, keyMinImportAmountBurn) * d6) 
    then invoke(pzsc, "importVVXTNLP", [], [])
    else unit
  []
}

@Callable(i)
func setAmountBurn(amount:Int) = 
if i.caller != this then throw("no") else
{
  [
  IntegerEntry(keyMinImportAmountBurn, amount),
  IntegerEntry("total XTN in vesting BURN-XTN", getIntegerValue(Vvested, keyVestedUSDN))
  ]
}

@Callable(i)
func invokerBBB() = 
if i.caller != bot then throw("no") else
{
  strict inv = if tryGetInteger(bbb, keyInvokeNext) == 2 then invoke(this, "BBB2", [], []) else invoke(this, "BBB1", [], [])
  []
}

@Callable(i)
func BBB1() = 
if i.caller != this then throw("no") else
if getIntegerValue(bbb, keyActivated) + 7 * 1440 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated) + 7 * 1440)) else
{
    strict inv = invoke(bbb, "claimInvestPuzzle", [], [])
    [ScriptTransfer(bot, d6, unit)]
}

@Callable(i)
func BBB2() = 
if i.caller != this then throw("no") else
if getIntegerValue(bbb, keyActivated2) + 7 * 1440 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated2) + 7 * 1440)) else
  {
    strict inv = invoke(bbb, "distribute", [], [])
    [ScriptTransfer(bot, d6, unit)]
  }

@Callable(i)
func BBB1any() = 
if getIntegerValue(bbb, keyActivated) + 7 * 1440 + 2 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated) + 7 * 1440 + 2)) else
if tryGetInteger(bbb, keyInvokeNext) == 2 then throw("invoke BBB2any first") else
  {
    strict inv = invoke(bbb, "claimInvestPuzzle", [], [])
    [ScriptTransfer(i.caller, d6, unit)]
  }

@Callable(i)
func BBB2any() = 
if getIntegerValue(bbb, keyActivated2) + 7 * 1440 + 2 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated2) + 7 * 1440 + 2)) else
if tryGetInteger(bbb, keyInvokeNext) == 1 then throw("invoke BBB1any first") else
  {
    strict inv = invoke(bbb, "distribute", [], [])
    [ScriptTransfer(i.caller, d6, unit)]
  }

@Callable(i)
func botAddress(address:String) =
if i.caller != this then throw("no") else
{[StringEntry(keyBotAddress, address)]}

@Callable(i)
func changeIntegerEntry(keyString:String, integer:Int) = 
if (i.caller != this) then throw("access only by project owner") else
    {[IntegerEntry(keyString, integer)]}

@Callable(i)
func burnXTN() = 
if (i.caller != this && i.caller != burn) then throw("access only by project owner") else 
{
  let xtnBurnAmount = assetBalance(this, xtnId)
  let xtnBurn = Burn(xtnId, xtnBurnAmount)  
  let surfBurnAmount = assetBalance(this, surfId)
  let surfBurn = Burn(surfId, surfBurnAmount)
  let burnxtnBurnAmount = assetBalance(this, burnxtnId)
  let burnxtnBurn = Burn(burnxtnId, burnxtnBurnAmount)
    [
    xtnBurn,
    surfBurn,
    burnxtnBurn,
    IntegerEntry("XTN total burned", getIntegerValue(this, "XTN total burned") + xtnBurnAmount),
    IntegerEntry("SURF total burned", tryGetInteger(this, "SURF total burned") + surfBurnAmount)
    ]
}

@Callable(i)
func invokerBurn1() = 
if i.caller != bot then throw("no") else
if lastBlock.timestamp % 86400000 < 50100000 then throw("too early") else
if lastBlock.timestamp % 86400000 > 50280000 then throw("too late") else
if tryGetInteger(this, keyInvokeNext) != 1 then throw("invoke other invokerBurn first") else
{
  strict burn1 = reentrantInvoke(burn, "invoke1", [], [])
  strict burn2 = reentrantInvoke(burn, "invoke2", [], [])
  [
  ScriptTransfer(bot, if i.caller == bot then d6 else 0, unit),
  IntegerEntry(keyInvokeNext, 2)
  ]
}  

@Callable(i)
func invokerBurn2() = 
if i.caller != bot then throw("no") else
if lastBlock.timestamp % 86400000 < 50521000 then throw("too early") else
if lastBlock.timestamp % 86400000 > 50701000 then throw("too late") else
if tryGetInteger(this, keyInvokeNext) != 2 then throw("invoke other invokerBurn first") else
{
  strict stakeW = if (wavesBalance(whi).available <= d8) then unit else invoke(whi, "stakeUnstake", [true, 0], [])
  strict stakeW2 = if (wavesBalance(cold).available <= d8) then unit else invoke(cold, "stakeUnstake", [true, 0], [])
  strict burn3 = invoke(burn, "invoke3", [], [])
  strict burn4 = invoke(this, "burnXTN", [], [])
  strict stats = invoke(burn, "projectStats", [], [])
  [
  ScriptTransfer(bot, if i.caller == bot then d6 else 0, unit),
  IntegerEntry(keyInvokeNext, 1)
  ]
}  

@Callable(i)
func invokerBurn3() = 
if i.caller != bot then throw("no") else
if getIntegerValue(oBurn, keyActivated3) + 7 * 1440 >= height 
then throw("Wait till blockheight" + toString(getIntegerValue(oBurn, keyActivated3) + 7 * 1440)) else
{
  strict burn4 = invoke(oBurn, "invoke4", [], [])
  strict cP1 = invoke(pzsc, "burnWhirl1cProjects", [], [])
  strict cP2 = invoke(pzsc, "whirlpool1cProjects", [], [])
  strict cP3 = invoke(pzsc, "bbb1cProjects", [], [])
  [ScriptTransfer(bot, d6, unit)]
}

@Callable(i)
func invokerBurn3any() = 
if getIntegerValue(oBurn, keyActivated3) + 7 * 1440 + 2 >= height 
then throw("Wait till blockheight" + toString(getIntegerValue(oBurn, keyActivated3) + 7 * 1440 + 2)) else
{
  strict burn4 = invoke(oBurn, "invoke4", [], [])
  [ScriptTransfer(bot, d6, unit)]
}

@Callable(i)
func invokerRead() = 
{
  let currentTodaysTimestamp = lastBlock.timestamp % 86400000
  let timing1 = if currentTodaysTimestamp >= 50100000 && currentTodaysTimestamp <= 50280000 && tryGetInteger(this, keyInvokeNext) == 1 then true else false
  let timing2 = if currentTodaysTimestamp >= 50521000 && currentTodaysTimestamp <= 50701000 && tryGetInteger(this, keyInvokeNext) == 2 then true else false
  let timing3 = if getIntegerValue(oBurn, keyActivated3) + 7 * 1440 <= height then true else false
    [
    BooleanEntry("invokerBurn1", timing1),
    BooleanEntry("invokerBurn2", timing2),
    BooleanEntry("invokerBurn3", timing3)
    ]
}  

@Callable(i)
func invokerBurn1t() = 
if i.caller != this then throw("no") else
if tryGetInteger(this, keyInvokeNext) != 1 then throw("invoke other invokerBurn2 first") else
{
  strict burn1 = reentrantInvoke(burn, "invoke1", [], [])
  strict burn2 = reentrantInvoke(burn, "invoke2", [], [])
  [
  ScriptTransfer(bot, d6, unit),
  IntegerEntry(keyInvokeNext, 2)
  ]
}  

@Callable(i)
func invokerBurn2t() = 
if i.caller != this then throw("no") else
if tryGetInteger(this, keyInvokeNext) != 2 then throw("invoke other invokerBurn1 first") else
{
  strict stakeW = invoke(whi, "stakeUnstake", [true, 0], [])
  strict stakeW2 = if wavesBalance(cold).available > d8 then invoke(cold, "stakeUnstake", [true, 0], []) else unit
  strict burn3 = invoke(burn, "invoke3", [], [])
  strict burn4 = invoke(this, "burnXTN", [], [])
  strict stats = invoke(burn, "projectStats", [], [])
  [
  ScriptTransfer(bot, d6, unit),
  IntegerEntry(keyInvokeNext, 1)
  ]
}

@Callable(i)
func invokerBurn3t() = 
if i.caller != this then throw("no") else
{
  strict burn4 = invoke(oBurn, "invoke4", [], [])
  [ScriptTransfer(bot, d6, unit)]
}
