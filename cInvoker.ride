{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}

let d6 = 1000000
let d8 = 100000000

func tryGetInteger (address:Address, key:String) = match getInteger(address, key) {
    case b: Int => 
        b
    case _ => 
        0
}

let keyInvokeNext = "invoke next"
let keyActivated = "Activated blockheight"
let keyActivated2 = "Activated 2 blockheight"
let keyActivated3 = "Activated 3 blockheight"

let xtnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let burnxtnId = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let surfId = base58'At8D6NFFpheCbvKVnjVoeLL84Eo8NZn6ovManxfLaFWL'

let oBurn = Address(base58'3PAucbbumdUXmhzcR421zGiayphEdo2tRoz')
let burn = Address(base58'3PDgtvrFh5aoDDuGUACNSudC6bRafs4DExf') # pcBurn
let bbb = Address(base58'3P6GgqAF4Vv4g2PFsevhKUW7JGtVUfvbULV') # pcBBB
let whi = Address(base58'3PMajWdGe8EXLtdZkAicWSmX2Bqtci99rwN') # pcWhirlpool
let cold = Address(base58'3PAX4yj66rLEGLcK93ZPaBhkwaoujEr7nSC') # pcCold
let pzsc = Address(base58'3PHLhWPrs1mrpM1ZDUv1VmUnZRwchADJELc')
let Vvested = Address(base58'3PKZk5TdPCLP2GZviipLFfK46ExTnwkRCBd')
let whirlPay = Address(base58'3PEgVPqJ3NYWbRn1CLELUpuY9KCmragc7sY')

@Callable(i)
func invokerBBB() = 
{strict inv = if tryGetInteger(bbb, keyInvokeNext) == 2 then invoke(this, "BBB2", [], []) else invoke(this, "BBB1", [], [])
[]}

@Callable(i)
func BBB1() = 
if i.caller != this then throw("no") else
if getIntegerValue(bbb, keyActivated) + 7 * 1440 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated) + 7 * 1440)) else
{
    strict inv = invoke(bbb, "claimInvestPuzzle", [], [])
    strict inv2 = invoke(bbb, "distributeBBQ", [], [])
    [ScriptTransfer(i.originCaller, d6, unit)]
}

@Callable(i)
func BBB2() = 
if i.caller != this then throw("no") else
if getIntegerValue(bbb, keyActivated2) + 7 * 1440 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated2) + 7 * 1440)) else
  {
    strict inv = invoke(bbb, "distribute", [], [])
    [ScriptTransfer(i.originCaller, d6, unit)]
  }

@Callable(i)
func burnXTN() = 
if (i.caller != this && i.caller != burn) then throw("access only by project owner") else 
{
  let xtnBurnAmount = assetBalance(this, xtnId)
  let xtnBurn = Burn(xtnId, xtnBurnAmount)  
  let surfBurnAmount = assetBalance(this, surfId)
  let surfBurn = Burn(surfId, surfBurnAmount)
  let burnxtnBurnAmount = assetBalance(this, burnxtnId)
  let burnxtnBurn = Burn(burnxtnId, burnxtnBurnAmount)
    [
    xtnBurn,
    surfBurn,
    burnxtnBurn,
    IntegerEntry("XTN total burned", getIntegerValue(this, "XTN total burned") + xtnBurnAmount),
    IntegerEntry("SURF total burned", tryGetInteger(this, "SURF total burned") + surfBurnAmount)
    ]
}

@Callable(i)
func invokerBurn1() = 
if getIntegerValue(this, keyActivated) + 1440 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(this, keyActivated) + 1440)) else
if tryGetInteger(this, keyInvokeNext) != 1 then throw("invoke other invokerBurn first") else
{
  strict burn1 = reentrantInvoke(burn, "invoke1", [], [])
  strict whirlBoost = invoke(whirlPay, "transferMega", [], [])
  strict whirlStats = invoke(whirlPay, "priceStats", [], [])
  [
  ScriptTransfer(i.originCaller, d6, unit),
  IntegerEntry(keyInvokeNext, 2),
  IntegerEntry(keyActivated, height)
  ]
}  

@Callable(i)
func invokerBurn2() = 
if getIntegerValue(this, keyActivated2) + 1440 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(this, keyActivated2) + 1440)) else
if tryGetInteger(this, keyInvokeNext) != 2 then throw("invoke other invokerBurn first") else
{
  strict burn2 = reentrantInvoke(burn, "invoke2", [], [])
  strict burn3 = invoke(this, "burnXTN", [], [])
  strict stats = invoke(burn, "projectStats", [], [])
  strict stakeW = if (wavesBalance(whi).available <= d8) then unit else invoke(whi, "stakeUnstake", [true, 0], [])
  #strict stakeW2 = if (wavesBalance(cold).available <= d8) then unit else invoke(cold, "stakeUnstake", [true, 0], [])
  [
  ScriptTransfer(i.originCaller, d6, unit),
  IntegerEntry(keyInvokeNext, 1),
  IntegerEntry(keyActivated2, height)
  ]
}  

@Callable(i)
func invokerBurn3() = 
if getIntegerValue(this, keyActivated3) + 7 * 1440 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(this, keyActivated3) + 7 * 1440)) else
{
  strict burn4 = invoke(oBurn, "invoke4", [], [])
  strict cP1 = invoke(pzsc, "burnWhirl1cProjects", [], [])
  strict cP2 = invoke(pzsc, "whirlpool1cProjects", [], [])
  #strict cP3 = invoke(pzsc, "bbb1cProjects", [], [])
  strict cP4 = invoke(pzsc, "eagle1cProjects", [], [])
  [
  ScriptTransfer(i.originCaller, d6, unit),
  IntegerEntry(keyActivated3, height)
  ]
}

@Callable(i)
func invokerRead() = 
{
  let timing1 = if getIntegerValue(this, keyActivated) + 1440 <= height  && tryGetInteger(this, keyInvokeNext) == 1 then true else false
  let timing2 = if getIntegerValue(this, keyActivated2) + 1440 <= height && tryGetInteger(this, keyInvokeNext) == 2 then true else false
  let timing3 = if getIntegerValue(this, keyActivated3) + 7 * 1440 <= height then true else false
    [
    BooleanEntry("invokerBurn1", timing1),
    BooleanEntry("invokerBurn2", timing2),
    BooleanEntry("invokerBurn3", timing3)
    ]
}  

@Callable(i)
func invokerBurn1t() = 
if i.caller != this then throw("no") else
if tryGetInteger(this, keyInvokeNext) != 1 then throw("invoke other invokerBurn2 first") else
{
  strict burn1 = reentrantInvoke(burn, "invoke1", [], [])
  strict whirlBoost = invoke(whirlPay, "transferMega", [], [])
  strict whirlStats = invoke(whirlPay, "priceStats", [], [])
  [IntegerEntry(keyInvokeNext, 2)]
}  

@Callable(i)
func invokerBurn2t() = 
if i.caller != this then throw("no") else
if tryGetInteger(this, keyInvokeNext) != 2 then throw("invoke other invokerBurn1 first") else
{
  strict burn2 = reentrantInvoke(burn, "invoke2", [], [])
  strict burn3 = invoke(this, "burnXTN", [], [])
  strict stats = invoke(burn, "projectStats", [], [])
  strict stakeW = if (wavesBalance(whi).available <= d8) then unit else invoke(whi, "stakeUnstake", [true, 0], [])
  #strict stakeW2 = if (wavesBalance(cold).available <= d8) then unit else invoke(cold, "stakeUnstake", [true, 0], [])
  [IntegerEntry(keyInvokeNext, 1)]
}

@Callable(i)
func invokerBurn3t() = 
if i.caller != this then throw("no") else
{
  strict burn4 = invoke(oBurn, "invoke4", [], [])
  strict cP1 = invoke(pzsc, "burnWhirl1cProjects", [], [])
  strict cP2 = invoke(pzsc, "whirlpool1cProjects", [], [])
  #strict cP3 = invoke(pzsc, "bbb1cProjects", [], [])
  strict cP4 = invoke(pzsc, "eagle1cProjects", [], [])
  []
}

@Callable(i)
func changeIntegerEntry(keyString:String, integer:Int) = 
if (i.caller != this) then throw("access only by project owner") else
    {[IntegerEntry(keyString, integer)]}

@Callable(i)
func deleteEntry (keyString:String) = 
if (i.caller != this) then throw("access only by project owner") else
  {[DeleteEntry(keyString)]}
