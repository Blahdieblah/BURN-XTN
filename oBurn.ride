{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}

let keyMaxSwap = "max amount swap"

let invoker = Address(base58'3P1yEqCmumg3rJmuNA39HMav6UxknqtYkb9')
let pcBurn = Address(base58'3PDgtvrFh5aoDDuGUACNSudC6bRafs4DExf')

let d6 = 1000000
let d8 = 100000000

let burnxtnId = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let wxId = base58'Atqv59EYzjFGuitKVnMRk6H8FukjoV3ktPorbEys25on'

func swapWX (assetIn:ByteVector, assetOut:ByteVector, amountIn:Int) =
  {invoke(Address(base58'3P68zNiufsu1viZpu1aY3cdahRRKcvV5N93'), "swap", [1, toBase58String(assetOut), toString(this)], [AttachedPayment(assetIn, amountIn)])}

func swapAmount (assetid:ByteVector) = 
{if assetBalance(this, assetid) > getIntegerValue(keyMaxSwap) then getIntegerValue(keyMaxSwap) else assetBalance(this, assetid)}

@Callable(i)
func invoke4 () = 
if (i.caller != this && i.caller != invoker) then throw("access only by project owner") else 
{
  strict swap = if assetBalance(this, wxId) >= 100000 && swapAmount(wxId) >= 100000 then swapWX(wxId, base58'WAVES', swapAmount(wxId)) else unit
  [
  IntegerEntry("Activated 3 blockheight", height),
  ScriptTransfer(invoker, d6, unit),
  ScriptTransfer(pcBurn,
    if (wavesBalance(this).available <= (2 * d8)) then 0 else
    wavesBalance(this).regular - (2 * d8), 
    unit),
  ScriptTransfer(pcBurn, assetBalance(this, burnxtnId), burnxtnId)
  ]
}

@Callable(i)
func maxAmount(maxSwap:Int) =
if (i.caller != this) then throw("access only by project owner") else 
{[IntegerEntry(keyMaxSwap, maxSwap * d8)]}

@Callable(i)
func deleteEntry (keyString:String) = 
if (i.caller != this) then throw("access only by project owner") else
  {[DeleteEntry(keyString)]}
