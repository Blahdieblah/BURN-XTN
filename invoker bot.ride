{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}

func tryGetString (address:Address, key:String) = match getString(address, key) {
    case b: String => 
        b
    case _ => 
        ""
}

func tryGetInteger (address:Address, key:String) = match getInteger(address, key) {
    case b: Int => 
        b
    case _ => 
        0
}

let keyInvokeNext = "invoke next"
let keyActivated = "Activated blockheight"
let keyActivated2 = "Activated 2 blockheight"
let keyBotAddress = "bot address string"

let keyBurnAmount = "burn amount"
let keyBurnxtnAmount = "burn BURN-XTN amount"

let d6 = 1000000
let d8 = 100000000

let vvxtnlp = base58'8KEtor9aSsSj38MknyAE7k1uRThHY9prAXgiE4D7WpyL'
let xtnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let burnxtnId = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let surfId = base58'At8D6NFFpheCbvKVnjVoeLL84Eo8NZn6ovManxfLaFWL'

let burn = Address(base58'3PCBL2vbjAVFbiCwmGsPmT6QdATutQnM8ov') #Address(base58'3PAucbbumdUXmhzcR421zGiayphEdo2tRoz') 
let bbb = Address(base58'3PEgVPqJ3NYWbRn1CLELUpuY9KCmragc7sY')
let swe = Address(base58'3PCxF4JryswYYp9mpUtE725wjTgvpBmp3M9')
let whi = Address(base58'3PAkmJniMgnnAej5pYf2jFYkCbZow5pt9tr')
let s = Address(base58'3PKjY3hmP1BCWtmhpXw9Ly85sgiQvpgq4wC')
let bot = addressFromStringValue(getStringValue(this, keyBotAddress))

@Callable(i)
func invoker() = 
{
  strict inv1 = invoke(Address(base58'3PAucbbumdUXmhzcR421zGiayphEdo2tRoz'), "withdraw", [], [])
  strict inv2 = if (assetBalance(Address(base58'3PAucbbumdUXmhzcR421zGiayphEdo2tRoz'), vvxtnlp) < 50) 
    then invoke(Address(base58'3PAkmJniMgnnAej5pYf2jFYkCbZow5pt9tr'), "withdraw", [], []) 
    else invoke(Address(base58'3PAucbbumdUXmhzcR421zGiayphEdo2tRoz'), "importVVXTNLP", [], [])
  strict inv3 = invoke(Address(base58'3PPCzX2doZ7agBNuGSKqjrbdXgGEtE7CpQ3'), "withdraw", [], [])
  strict inv4 = invoke(Address(base58'3PHLhWPrs1mrpM1ZDUv1VmUnZRwchADJELc'), "withdraw", [], [])
  []
}

@Callable(i)
func invokerBBB() = 
if i.caller != bot then throw("no") else
{
  strict inv = if tryGetInteger(bbb, keyInvokeNext) == 2 then invoke(this, "BBB2", [], []) else invoke(this, "BBB1", [], [])
  []
}

@Callable(i)
func BBB1() = 
if i.caller != this then throw("no") else
if getIntegerValue(bbb, keyActivated) + 7 * 1440 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated) + 7 * 1440)) else
{
    strict inv = invoke(bbb, "claimInvestPuzzle", [], [])
    [ScriptTransfer(bot, d6, unit)]
}

@Callable(i)
func BBB2() = 
if i.caller != this then throw("no") else
if getIntegerValue(bbb, keyActivated2) + 7 * 1440 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated2) + 7 * 1440)) else
  {
    strict inv = invoke(bbb, "distribute", [], [])
    [ScriptTransfer(bot, d6, unit)]
  }

@Callable(i)
func BBB1any() = 
if getIntegerValue(bbb, keyActivated) + 7 * 1440 + 2 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated) + 7 * 1440 + 2)) else
if tryGetInteger(bbb, keyInvokeNext) == 2 then throw("invoke BBB2any first") else
  {
    strict inv = invoke(bbb, "claimInvestPuzzle", [], [])
    [ScriptTransfer(bot, d6, unit)]
  }

@Callable(i)
func BBB2any() = 
if getIntegerValue(bbb, keyActivated2) + 7 * 1440 + 2 > height 
then throw("Wait till blockheight" + toString(getIntegerValue(bbb, keyActivated2) + 7 * 1440 + 2)) else
if tryGetInteger(bbb, keyInvokeNext) == 1 then throw("invoke BBB1any first") else
  {
    strict inv = invoke(bbb, "distribute", [], [])
    [ScriptTransfer(bot, d6, unit)]
  }

@Callable(i)
func botAddress(address:String) =
if i.caller != this then throw("no") else
{
    [StringEntry(keyBotAddress, address)]
}

@Callable(i)
func changeIntegerEntry(keyString:String, integer:Int) = 
if (i.caller != this) then throw("access only by project owner") else
    {[IntegerEntry(keyString, integer)]}

@Callable(i)
func burnXTN() = 
if (i.caller != this && i.caller != burn) then throw("access only by project owner") else {

  let xtnBurn = Burn(xtnId, tryGetInteger(burn, keyBurnAmount))
  let surfBurn = Burn(surfId, tryGetInteger(burn, keyBurnAmount))
  let burnxtnBurn = Burn(burnxtnId, tryGetInteger(burn, keyBurnxtnAmount))
    [
    xtnBurn,
    surfBurn,
    burnxtnBurn,
    IntegerEntry("XTN total burned", getIntegerValue(this, "XTN total burned") + tryGetInteger(burn, keyBurnAmount)),
    IntegerEntry("XTN supply", match assetInfo(xtnId) {
    case asset:Asset =>
        (asset.quantity - assetBalance(Address(base58'3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo'), xtnId)) / d6
    case _ => throw("Can't find asset")
    }),
    IntegerEntry("SURF total burned", tryGetInteger(this, "SURF total burned") + tryGetInteger(burn, keyBurnAmount)),
    IntegerEntry("SURF supply", match assetInfo(surfId) {
    case asset:Asset =>
        asset.quantity / d6
    case _ => throw("Can't find asset") }),
    IntegerEntry("BURN-XTN total burned", 1000000000 - match assetInfo(burnxtnId) {
    case asset:Asset =>
        asset.quantity / d8
    case _ => throw("Can't find asset")}),
    IntegerEntry("BURN-XTN supply", match assetInfo(burnxtnId) {
    case asset:Asset =>
        asset.quantity / d8
    case _ => throw("Can't find asset")})
    ]
}

@Callable(i)
func invokerAllin() = 
if 
#i.caller != bot && 
i.caller != s then throw("no") else
if lastBlock.timestamp % 86400000 > 50280000 then throw("too late") else
if lastBlock.timestamp % 86400000 < 50100000 then throw("too early") else
{
  strict inv = invoke(swe, "allin", [], [])
  strict inv2 = invoke(whi, "allin", [], [])
  [
  #ScriptTransfer(bot, d6, unit)
  ]
}

@Callable(i)
func invokerAllout() = 
if 
#i.caller != bot && 
i.caller != s then throw("no") else
if lastBlock.timestamp % 86400000 < 50521000 then throw("too early") else
if lastBlock.timestamp % 86400000 > 50701000 then throw("too late") else
{
  strict inv = invoke(swe, "allout", [], [])
  strict inv2 = invoke(whi, "allout", [], [])
  [
  #ScriptTransfer(bot, d6, unit)
  ]
}    
