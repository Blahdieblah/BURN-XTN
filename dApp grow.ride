{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}

func tryGetInteger (address:Address, key:String)= match getInteger(address, key) {
    case b: Int => 
        b
    case _ => 
        0
}

let keyBurnAmount = "burn amount"
let keyBurnxtnAmount = "burn BURN-XTN amount"

let sWsc = Address(base58'3PDPzZVLhN1EuzGy4xAxjjTVkawKDLEaHiV')
let swopSC = Address(base58'3PHaNgomBkrvEL2QnuJarQVJa71wjw9qiqG')
let swopFarm = Address(base58'3P73HDkPqG15nLXevjCbmXtazHYTZbpPoPw')
let swopGov = Address(base58'3PLHVWCqA9DJPDbadUofTohnCULLauiDWhS')
let swopXTNsurf = Address(base58'3PLp9KrdrbWAvSFHGJVEaszUubquz3M6mfe')
let invoker = Address(base58'3P4AdC9J6MzTEi2LL9xgQN8EimMnbk4d6Nt')

let d6 = 1000000
let d8 = 100000000
let d16 = (d8 * d8)

let poolId = base58'3PE7NtJdmVq4yo47LKDqurQ8RLDCouvJCPB'
let poolString = toBase58String(poolId)
let pool2 = base58'3PQHndCUVrv3wBuQjbvVP9SnGmfbfitGxfx'
let poolMega = base58'3PBiMQLnX8wd4bssXCgF8KuUqHv1H4zWHGi'
let poolBBB = base58'3P9VPwVfNj3dDevQZt1Z951A4K57cmQmCgk'
let poolWhirl = base58'3P2myTbd5zpEHcYmNpdWTp5gXS5B8tL1RCY'
let poolBW = base58'3P48ZN6yghcoQaHPtLM9V2hFc5cd4ARd1hc'
let poolSWAVES = base58'3PK4ZxDsRB8pNSuiYbco9K8BchqnhhKwYsq'

let poolLP = base58'3PQoBfUKHkJAeGWhooLP7WS8ovb54av9Jp2'

let xtnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let burnxtnId = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let burnxtnString = toBase58String(burnxtnId)

let surfId = base58'At8D6NFFpheCbvKVnjVoeLL84Eo8NZn6ovManxfLaFWL'
let swopId = base58'Ehie5xYpeN8op1Cctc6aGUrqx8jq3jtf1DSjXDbfm7aT'
let wavesId = base58'WAVES'
let swaves = base58'YiNbofFzC17jEHHCMwrRcpy9MrrjabMMLZxg8g5xmf7'
let puzzle = base58'HEB8Qaw9xrWpWs8tHsiATYGBWDBtP2S7kcPALrMu43AS'
let whirlpool = base58'73tY3E6Gd5AWYmsuq8m8Kek7KnJNAYyS3GoveTbc6jCi'
let rome = base58'AP4Cb5xLYGH6ZigHreCZHoXpQTWDkPsG2BHqfDUx6taJ'
let vvxtnlp = base58'8KEtor9aSsSj38MknyAE7k1uRThHY9prAXgiE4D7WpyL'
let pzBBB = base58'AE12ZN9PQyPKHR5CqR2Qau31JqS68rZbVYxaJbRM8kFj'
let usdtppt = base58'G5WWWzzVsWRyzGf32xojbnfp7gXbWrgqJT8RcVWEfLmC'
let sW = base58'YiNbofFzC17jEHHCMwrRcpy9MrrjabMMLZxg8g5xmf7'

# calculate value of sWAVES to WAVES
let SWAVES_stake = Address(base58'3PDPzZVLhN1EuzGy4xAxjjTVkawKDLEaHiV')
func _loadInt (key_:String,default_:Int) = match getInteger(SWAVES_stake, key_) {
    case a: Int => 
        a
    case _ => 
        default_
}

func _loadBigInt (key_:String,default_:BigInt) = match getBinary(SWAVES_stake, key_) {
    case a: ByteVector => 
        toBigInt(a)
    case _ => 
        default_
}

    let WX_BURNXTN_WAVES = Address(base58'3P5vwLbXddLWpsRspftMxLuzfsjk3dLT3n5')
    let WX_WAVES_USD = Address(base58'3PKfrupEydU2nZAghVjZAfvCwMBkzuR1F52')
    let lastRate = _loadBigInt("LAST_RATE", toBigInt(1000000000000))
    let currentRate = _loadBigInt("CURRENT_RATE", toBigInt(0))
    let lastHeight = _loadInt("LAST_HEIGHT", 0)
    let targetHeight = min([_loadInt("TARGET_HEIGHT", 0), height])
    let lastRateUpdated = (lastRate + (currentRate * toBigInt((targetHeight - lastHeight))))
    let baseAmount = toInt(fraction(toBigInt(assetBalance(WX_BURNXTN_WAVES, swaves)), lastRateUpdated, toBigInt(1000000000000), FLOOR))
    let baseAmount2 = toInt(fraction(toBigInt(assetBalance(WX_WAVES_USD, swaves)), lastRateUpdated, toBigInt(1000000000000), FLOOR))

let wavesInWX = wavesBalance(WX_BURNXTN_WAVES).regular + baseAmount
let burnxtnInWX = assetBalance(WX_BURNXTN_WAVES, burnxtnId)
let burnxtnwavesprice = fraction(d8, wavesInWX, burnxtnInWX)

let wavesInWX2 = wavesBalance(WX_WAVES_USD).regular + baseAmount2
let usdInWX = assetBalance(WX_WAVES_USD, usdtppt)
let wavesusdprice = fraction(d8, usdInWX, wavesInWX2)

let burnxtnusdprice = fraction(burnxtnwavesprice, wavesusdprice, d8)

let ATH = if burnxtnwavesprice > getIntegerValue("ATH in wavelets") then burnxtnwavesprice else getIntegerValue(this, "ATH in wavelets")
let ATHusd = if burnxtnusdprice > getIntegerValue("ATH in centlets") then burnxtnusdprice else getIntegerValue(this, "ATH in centlets")
let pricegrowth = (fraction(d8, burnxtnwavesprice, getIntegerValue(this, "intial price BURN-XTN in wavelets")) - d8) / 1000000

# SURF staking
let surfAddress = Address(base58'3PBiotFpqjRMkkeFBccnQNUXUopy7KFez5C')
let surfStaking = getIntegerValue(surfAddress, "%s%s%s__paramByUser__" + toString(this) + "__amount") / d6


@Callable(i)
func invoke1() = 
if (i.caller != this) then throw("access only by project owner") else 
{
  strict burnxtnBalanceBefore = assetBalance(this, burnxtnId)
  strict claimInv = invoke(Address(poolSWAVES), "claimIndexRewards", [], [])
  let burnxtnDifference = assetBalance(this, burnxtnId) - burnxtnBalanceBefore

  strict claimInvW = invoke(Address(poolBW), "claimIndexRewards", [], [])

  strict withdrawSwopGov = invoke(swopGov, "claimAndWithdrawSWOP", [], [])
  strict stakeSwopFarming = invoke(swopFarm, "claimAllAndStake", [["3PHaNgomBkrvEL2QnuJarQVJa71wjw9qiqG"]], [])

  strict withdrawSWAVES = invoke(sWsc, "withdraw", [], [AttachedPayment(sW, assetBalance(this, sW))])
  strict lpWavesXtn = 
    if assetBalance(this, xtnId) > 2 * tryGetInteger(this, keyBurnAmount) 
    && wavesBalance(this).available > d8 then
    invoke(swopSC, "callFunction", ["replenishWithTwoTokens", ["true", "0"]], [AttachedPayment(unit, wavesBalance(this).regular - d8), AttachedPayment(xtnId, assetBalance(this, xtnId) - 2 * tryGetInteger(this, keyBurnAmount))]) else unit
  strict inv = invoke(sWsc, "deposit", [], [AttachedPayment(unit, wavesBalance(this).available - d8)])
  [
  IntegerEntry(keyBurnxtnAmount, burnxtnDifference),
  ScriptTransfer(invoker, burnxtnDifference, burnxtnId),
  IntegerEntry("BURN-XTN / WAVES price in wavelets", burnxtnwavesprice),
  IntegerEntry("Price growth %", pricegrowth),
  IntegerEntry("ATH in wavelets", ATH),
  IntegerEntry("BURN-XTN / USD price in centlets", burnxtnusdprice),
  IntegerEntry("ATH in centlets", ATHusd),
  IntegerEntry("Activated blockheight", height),
  IntegerEntry("Waves/USD price", wavesusdprice)
  ]
}

@Callable(i)
func invoke2() = 
if (i.caller != this) then throw("access only by project owner") else 
{
  strict inv1 = invoke(this, "bbbAndTransfer", [], [])
  strict inv2 = invoke(this, "burn", [], [])
  []
}


@Callable(i)
func bbbAndTransfer() =
if (i.caller != this) then throw("access only by project owner") else
{
    strict inv = if (assetBalance(this, puzzle) > 0) then
      invoke(Address(poolLP), "generateWithOneToken", [toBase58String(poolBBB)], [AttachedPayment(puzzle, assetBalance(this, puzzle))]) else unit
    strict stakePZbbb = if (assetBalance(this, pzBBB) > 0) then
      invoke(Address(poolBBB), "stakeIndexFor", [toString(this)], [AttachedPayment(pzBBB, assetBalance(this, pzBBB))]) else unit
    strict swapXtnSurf = invoke(swopXTNsurf, "callFunction", ["exchange", ["1"]], [AttachedPayment(xtnId, tryGetInteger(this, keyBurnAmount))])
    [
    ScriptTransfer(invoker, tryGetInteger(this, keyBurnAmount), xtnId),
    ScriptTransfer(invoker, tryGetInteger(this, keyBurnAmount), surfId)
    ]
}

@Callable(i)
func burn() =
if (i.caller != this) then throw("access only by project owner") else
{
  strict inv = invoke(invoker, "burnXTN", [], [])
  []
}

@Callable(i)
func burnAmount(amount:Int) =
if (i.caller != this) then throw("access only by project owner") else 
{[IntegerEntry(keyBurnAmount, amount 
#* d6
)]}

@Callable(i)
func withdraw() = 
if (i.caller != Address(base58'3P4AdC9J6MzTEi2LL9xgQN8EimMnbk4d6Nt')) then throw("no access") else
{
  strict withdraw = invoke(Address(base58'3PCbvPVQfSvVu88ip8Fm5YjwJhjEYk1Txhk'), "withdrawVestedAllUSDN", [false, true], [])
  []
}

@Callable(i)
func importVVXTNLP() =
if (i.caller != Address(base58'3P4AdC9J6MzTEi2LL9xgQN8EimMnbk4d6Nt')) then throw("no access") else
{
  strict import = invoke(Address(base58'3PCbvPVQfSvVu88ip8Fm5YjwJhjEYk1Txhk'), "importLP", [], [AttachedPayment(vvxtnlp, assetBalance(this, vvxtnlp))])
  []
}
