{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}


func tryGetInteger (address:Address, key:String) = match getInteger(address, key) {
    case b: Int => 
        b
    case _ => 
        0
}

let d8 = 100000000
let d16 = (d8 * d8)

let unlockBlock = (30 * 1440)
let heirPubKey = base58'2kpmuzw1ZbrtgAN3BrR7vbEW1XrJoJKCstL7mf7XNf2P' # Ivash

let unlockBlock2 = (90 * 1440)
let PuzzleMasterPubKey = base58'4z8CKSYQBKkzx7PBb5uBP1YPa6YAHRNTApW1sQVHT5eU' # Vladimir and Ania Address: 3PLjwHcz9NEuaTo63NZR9B9okQiKQxZSbmf

let burnxtnpoolId = base58'3PE7NtJdmVq4yo47LKDqurQ8RLDCouvJCPB'
let burnxpptpoolId = base58'3PQHndCUVrv3wBuQjbvVP9SnGmfbfitGxfx' # = BURN-XTN x PepeTeam
let whirlpoolpoolId = base58'3P2myTbd5zpEHcYmNpdWTp5gXS5B8tL1RCY'
let burnxtnswavesId = base58'3PK4ZxDsRB8pNSuiYbco9K8BchqnhhKwYsq'

let burnxtn_pz_amount = getIntegerValue(Address(burnxtnpoolId), (toString(this) + "_indexStaked"))
let burnxppt_pz_amount = getIntegerValue(Address(burnxpptpoolId), (toString(this) + "_indexStaked"))
let burnxtnswaves_pz_amount = getIntegerValue(Address(burnxtnswavesId), (toString(this) + "_indexStaked"))
let activated = getIntegerValue(Address(base58'3PAucbbumdUXmhzcR421zGiayphEdo2tRoz'), "Activated blockheight")

let PZ_burnxtn_id = base58'GdrDHazRGcCYeCgDEZzLpsZ3E7jmrxYB7EDUiGfiVAr1'
let PZ_burnxtnppt_id = base58'2r5xCUHFLQVHKNC5k6qqRnDTT485KvKwAtbNtM2Wy4wW'
let PZ_whirlpool_id = base58'4ogHLDYJevjxU1XAQjynbKNE1rYrFvLdET2gDLnA9TiL'
let PZ_burnxtnswaves_id = base58'HXbKm7u7B4U2WEeK4L9pmUsP2ToypATt9vsafssAEMQG'
let WX_burnxtnwaves_id = base58'GyiHdcN59sZ46baFvj68ruLngrTPEvWDtsd6jHm4o46n'
let WX_peteburnxtn_id = base58'3MPHMJVwYGyeBLRsH1RsYhrTmemv752AEBwuFFV7g49Z'

let wavesdaoaddress = Address(base58'3PEwRcYNAUtoFvKpBhKoiwajnZfdoDR6h4h')
let burnxtnProjectAddress = Address(base58'3PAucbbumdUXmhzcR421zGiayphEdo2tRoz')

let xtnId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let swaves = base58'YiNbofFzC17jEHHCMwrRcpy9MrrjabMMLZxg8g5xmf7'

@Callable(i)
func burnxtn() = 
if (i.caller != this) then throw("access only by project owner") else
{
strict unstakeIndex = invoke(Address(burnxtnpoolId), "unstakeIndex", [burnxtn_pz_amount], [])
strict stakeIndexFor = invoke(Address(burnxtnpoolId), "stakeIndexFor", [toString(wavesdaoaddress)], [AttachedPayment(PZ_burnxtn_id, assetBalance(this, PZ_burnxtn_id))])
[]
}

@Callable(i)
func burnxtnxppt() = 
if (i.caller != this) then throw("access only by project owner") else
{
strict unstakeIndex = invoke(Address(burnxpptpoolId), "unstakeIndex", [burnxppt_pz_amount], [])
strict stakeIndexFor = invoke(Address(burnxpptpoolId), "stakeIndexFor", [toString(wavesdaoaddress)], [AttachedPayment(PZ_burnxtnppt_id, assetBalance(this, PZ_burnxtnppt_id))])
[]
}   

@Callable(i)
func burnxtnswaves() = 
if (i.caller != this) then throw("access only by project owner") else
{
strict unstakeIndex = invoke(Address(burnxtnswavesId), "unstakeIndex", [burnxtnswaves_pz_amount], [])
strict stakeIndexFor = invoke(Address(burnxtnswavesId), "stakeIndexFor", [toString(wavesdaoaddress)], [AttachedPayment(PZ_burnxtnswaves_id, assetBalance(this, PZ_burnxtnswaves_id))])
[]
}   

@Callable(i)
func whirlpool1() = 
if (i.caller != this) then throw("access only by project owner") else
{
strict stakeIndexFor = invoke(Address(whirlpoolpoolId), "stakeIndexFor", [toString(wavesdaoaddress)], [AttachedPayment(PZ_whirlpool_id, 1)])
[]
}

@Callable(i)
func burnxtnAny() = 
if (height < getIntegerValue(burnxtnProjectAddress, "Activated blockheight") + 30 * 1440)
then throw("Wait till blockheight" + toString(getIntegerValue(burnxtnProjectAddress, "Activated blockheight") + 30 * 1440)) else
{
strict unstakeIndex = invoke(Address(burnxtnpoolId), "unstakeIndex", [burnxtn_pz_amount], [])
strict stakeIndexFor = invoke(Address(burnxtnpoolId), "stakeIndexFor", [toString(wavesdaoaddress)], [AttachedPayment(PZ_burnxtn_id, assetBalance(this, PZ_burnxtn_id))])
[]
}

@Callable(i)
func burnxtnxpptAny() = 
if (height < getIntegerValue(burnxtnProjectAddress, "Activated blockheight") + 30 * 1440)
then throw("Wait till blockheight" + toString(getIntegerValue(burnxtnProjectAddress, "Activated blockheight") + 30 * 1440)) else
{
strict unstakeIndex = invoke(Address(burnxpptpoolId), "unstakeIndex", [burnxppt_pz_amount], [])
strict stakeIndexFor = invoke(Address(burnxpptpoolId), "stakeIndexFor", [toString(wavesdaoaddress)], [AttachedPayment(PZ_burnxtnppt_id, assetBalance(this, PZ_burnxtnppt_id))])
[]
}

@Callable(i)
func burnxtnswavesAny() = 
if (height < getIntegerValue(burnxtnProjectAddress, "Activated blockheight") + 30 * 1440)
then throw("Wait till blockheight" + toString(getIntegerValue(burnxtnProjectAddress, "Activated blockheight") + 30 * 1440)) else
{
strict unstakeIndex = invoke(Address(burnxtnswavesId), "unstakeIndex", [burnxtnswaves_pz_amount], [])
strict stakeIndexFor = invoke(Address(burnxtnswavesId), "stakeIndexFor", [toString(wavesdaoaddress)], [AttachedPayment(PZ_burnxtnswaves_id, assetBalance(this, PZ_burnxtnswaves_id))])
[]
}  

@Callable(i)
func returnAssets() = 
if height < getIntegerValue(burnxtnProjectAddress, "Activated blockheight") + 30 * 1440 then throw("Wait till blockheight" + toString(getIntegerValue(burnxtnProjectAddress, "Activated blockheight") + 30 * 1440)) else
{
[
ScriptTransfer(wavesdaoaddress, wavesBalance(this).available, unit),
ScriptTransfer(wavesdaoaddress, assetBalance(this, swaves), swaves),
ScriptTransfer(wavesdaoaddress, assetBalance(this, xtnId), xtnId)
]
}

@Callable(i)
func withdraw() = {
  strict withdraw = invoke(Address(base58'3PCbvPVQfSvVu88ip8Fm5YjwJhjEYk1Txhk'), "withdrawVestedAllUSDN", [false, true], [])
  []
}

@Verifier(tx)
func verify()={
  sigVerify_16Kb(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)

  || if (height < activated + unlockBlock) then false else
  sigVerify_16Kb(tx.bodyBytes, tx.proofs[0], heirPubKey)

  || if (height < activated + unlockBlock2) then false else
  sigVerify_16Kb(tx.bodyBytes, tx.proofs[0], PuzzleMasterPubKey)
}
