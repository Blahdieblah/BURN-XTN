{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT artifacts/mainnet.ride #-}

func tryGetInteger (address:Address, key:String) = match getInteger(address, key) {
    case b: Int => 
        b
    case _ => 
        0
}

func tryGetString (address:Address, key:String) = match getString(address, key) {
    case b: String => 
        b
    case _ => 
        ""
}

let d6 = 1000000
let d8 = 100000000

let minimumIncrease = d8

let poolId = base58'3PE7NtJdmVq4yo47LKDqurQ8RLDCouvJCPB'
let poolString = toBase58String(poolId)
let pool2 = base58'3PQHndCUVrv3wBuQjbvVP9SnGmfbfitGxfx'
let matcher = Address(base58'3PEjHv3JGjcWNpYEEkif2w8NXV4kbhnoGgu')

let whirlpool = base58'73tY3E6Gd5AWYmsuq8m8Kek7KnJNAYyS3GoveTbc6jCi'
let xtn = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p'
let burnxtn = base58'3SjxA2YLdfF9fTRbzLm9xFn27C6MW34W1YsdJ6Axefns'
let burnxtnString = toBase58String(burnxtn)
let waves = base58'WAVES'
let wx = base58'Atqv59EYzjFGuitKVnMRk6H8FukjoV3ktPorbEys25on'
let westId = base58'4LHHvYGNKJUg5hj65aGD5vgScvCBmLpdRFtjokvCjSL8'
let viresId = base58'DSbbhLsSTeDg5Lsiufk2Aneh3DjVqJuPr2M9uU1gwy5p'
let eggId = base58'C1iWsKGqLwjHUndiQ7iXpdmPum9PeCDFfyXBdJJosDRS'
let surfId = base58'At8D6NFFpheCbvKVnjVoeLL84Eo8NZn6ovManxfLaFWL'
let nsbtId = base58'6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g'
let wxId = base58'Atqv59EYzjFGuitKVnMRk6H8FukjoV3ktPorbEys25on'
let swopId = base58'Ehie5xYpeN8op1Cctc6aGUrqx8jq3jtf1DSjXDbfm7aT'

let keyAddressesRegistered = "Addresses registered"
let addresses = dropRight(tryGetString(this, keyAddressesRegistered), 1)
let keyAmountRegistered = "Amount Registered"
let keyParticipants = "participants list string"
let keyTotalBalanceCount = "total balance count"
let keyTotalBalanceJackpotCount = "total balance jackpot count"
let keyTotalSponsor = "total sponsor"
let keyTotalBalanceSponsorCount = "total balance sponsor count"

let NFT = Address(base58'3PEgVPqJ3NYWbRn1CLELUpuY9KCmragc7sY')
let WFSlist = ["Gnpy5nVajPP3XQQVxrHboMAsXtjnyWAxybMDdKrbr8sD", "BT9Q4mQdQQmei2r5YNMBMasZBQj7myNaiz6QHba5cPXS", "BMvkyFtPVmFatpFR9QVFKR5MYTcZVTY2VUwFZ25vrAAc", "77Rqu8TLjBdMtDuXd9o5fUSGo64zQe5FCcao5L8Ht9j8", tryGetString(NFT, "5"), tryGetString(NFT, "6"), tryGetString(NFT, "7"), tryGetString(NFT, "8"), tryGetString(NFT, "9"), tryGetString(NFT, "10")]
let BBBlist = ["9pCxoGtD18GeH9gCemzqrjHMMjfyBQDfsrRAuxSRagMc", "7DgFgCkBjVDc5P9ZgwsVL9SiTi7kXJuS4aRVgb7ZHW3k", "76bTvE8ttHvsuN1FuH4Kc8QUW4kL4m8c1cjfsXy2GfbV", "4Zrf4H5tiFcQL8eQmnA2wJ1XWPEBH6h1G2MefZDYmcCB", "2DtC4nFnxz5UM6mbjPwMVZpQWZFUqxs52oZrBeNRk9Ao", "DjZGMAFfoQWkMW3S5FTsQN3joncZt6BsmhnEK3ggLxmN", "BneaZXD6ovDJcV5rgfr8hsHZaMQsJQ8DH6a5gTnGCpBc", "4EKfgzFkd5UGKrjnaJV3w7argW1YmF4hq54xWQFzAXb9", "8hGDkWKiu2igDpWT3Hpr4mchDD6xwJ9hGm2h2jnUvTqz", "E3ZnSejpXL1Xr6VG4QoLh8xod9NMgpPe473r9Qk2HibL"]

func rand(i:Invocation)= 
  i.transactionId 
    + i.callerPublicKey 
    + lastBlock.generationSignature 
    + toBytes(lastBlock.timestamp) 
    + toBytes(height)
    + toBytes(assetBalance(this, burnxtn))
    + toBytes(wavesBalance(matcher).available)
    + toBytes(assetBalance(this, wx))

let PZ1 = base58'3PE7NtJdmVq4yo47LKDqurQ8RLDCouvJCPB'
let PZ2 = base58'3PQHndCUVrv3wBuQjbvVP9SnGmfbfitGxfx'
let PZ3 = base58'3PBiMQLnX8wd4bssXCgF8KuUqHv1H4zWHGi'
let PZ4 = base58'3PDJPGn6vBEBqWN4E3fNcxoKBoDXbsmoaM7'
let PZ5 = base58'3PCS1xhGQi2eM5mYcCBhUSHvB31Kk5gZoCm'
let PZ6 = base58'3P8Quvmgt3VEWAjBR3bsfgCqzUh7zTmTC4q'

let WXstake = base58'3PPNhHYkkEy13gRWDCaruQyhNbX2GrjYSyV'
let WX1 = base58'3P5vwLbXddLWpsRspftMxLuzfsjk3dLT3n5'
let LP1 = "GyiHdcN59sZ46baFvj68ruLngrTPEvWDtsd6jHm4o46n"
let WX2 = base58'3PKXseWa31VUSWUvm2YiRKxW2VM9RsVk3ry'
let LP2 = "3MPHMJVwYGyeBLRsH1RsYhrTmemv752AEBwuFFV7g49Z"

let PZw1 = base58'3P2myTbd5zpEHcYmNpdWTp5gXS5B8tL1RCY'

func PZbal(Pooladdress:ByteVector, address:Address, asset:ByteVector) = {
    let burnxtnInPZ = tryGetInteger(Address(Pooladdress), ("global_" + toBase58String(asset)) + "_balance")
    let addressStakePZ = tryGetInteger(Address(Pooladdress), (toString(address) + "_indexStaked"))
    let totalStakePZ = tryGetInteger(Address(Pooladdress), ("global_poolToken_amount"))
    fraction(burnxtnInPZ, addressStakePZ, totalStakePZ)
}

func WXbal(Pooladdress:ByteVector, address:Address, LPstr:String) = {
    let burnxtnInWX = assetBalance(Address(Pooladdress), burnxtn)
    let addressStakeWX = tryGetInteger(Address(WXstake), "%s%s%s__staked__" + toString(address) + "__" + LPstr)
    let totalStakeWX = tryGetInteger(Address(WXstake), "%s%s%s__staked__total__" + LPstr)
    fraction(burnxtnInWX, addressStakeWX, totalStakeWX)
}

let whirlpoolSupply = match assetInfo(whirlpool) {
    case asset:Asset => asset.quantity
    case _ => throw("Can't find asset")
  } 

func burnxtnBalance(i:Invocation)= assetBalance(i.caller, burnxtn)

func totalBalance(address:Address)= {
    let burnxtnBalance2 = assetBalance(address, burnxtn)
    let PZ1balance = PZbal(PZ1, address, burnxtn)
    let PZ2balance = PZbal(PZ2, address, burnxtn)
    let PZ3balance = PZbal(PZ3, address, burnxtn)
    let PZ4balance = PZbal(PZ4, address, burnxtn)
    let PZ5balance = PZbal(PZ5, address, burnxtn)
    let PZ6balance = PZbal(PZ6, address, burnxtn)
    let WX1balance = WXbal(WX1, address, LP1)
    let WX2balance = WXbal(WX2, address, LP2)
    burnxtnBalance2 + PZ1balance + PZ2balance + PZ3balance + PZ4balance + PZ5balance + PZ6balance + WX1balance + WX2balance
}

func totalWhirlpoolBalance(address:Address)= {
    let whirlpoolBalance = assetBalance(address, whirlpool)
    let PZw1balance = PZbal(PZw1, address, whirlpool)
    whirlpoolBalance + PZw1balance
}

@Callable(i)
func register()= 

if (contains(tryGetString(this, keyAddressesRegistered), toString(i.caller))) then throw("already registered") else
if tryGetInteger(this, keyAmountRegistered) >= 90 then throw("max registered users") else
{
  [
    IntegerEntry(keyAmountRegistered, tryGetInteger(this, keyAmountRegistered) + 1),
    StringEntry("Register address: " + toString((tryGetInteger(this, keyAmountRegistered) +1)), toString(i.caller)),
    StringEntry(keyAddressesRegistered, (tryGetString(this, keyAddressesRegistered) + toString(i.caller) + ",")),
    IntegerEntry(toString(i.caller), burnxtnBalance(i))
  ]
}

@Callable(i)
func checkMyEntry()=
if (contains(tryGetString(this, keyAddressesRegistered), toString(i.caller))) == false then throw("not yet registered") else
{
    [
    BooleanEntry("HODL+1", assetBalance((i.caller), burnxtn) >= (tryGetInteger(this, toString(i.caller)) + minimumIncrease)),
    IntegerEntry("highest recorded BURN-XTN balance by lottery", tryGetInteger(this, toString(i.caller)) / d8),
    IntegerEntry("current BURN-XTN balance", burnxtnBalance(i) / d8),
    IntegerEntry("required BURN-XTN balance", (tryGetInteger(this, toString(i.caller)) + minimumIncrease) / d8),
    IntegerEntry("entries = total BURN-XTN balance incl liquidity pools", totalBalance(i.caller) / d8)
    ]
} 

@Callable(i)
func step_1()=
if (i.caller != this) then throw("access only by project owner") else
{
    strict r = invoke(this, "reset", [], []) #4
    strict p = invoke(this, "participants", [], []) #1
    strict u = invoke(this, "updateBalanceEntry", [], []) #95 
    []
}

@Callable(i)
func step_2()=
if (i.caller != this) then throw("access only by project owner") else
{
    strict tba = invoke(this, "totalBalanceAll", [], []) #1
    strict tbwa = invoke(this, "totalBalanceWhirlpoolAll", [], []) #1
    strict w = invoke(this, "winner", [], []) # 4
    strict in = invoke(this, "invoker", [], []) # up to 93 addresses
    []
}

@Callable(i)
func step_3()=
if (i.caller != this) then throw("access only by project owner") else
{
    strict p = invoke(this, "payWinner", [], []) #47
    strict j = invoke(this, "jackpot", [], []) #5
    if getBooleanValue("jackpot") == false then [] else 
    strict w = invoke(this, "winnerJackpot", [], []) # 4
    []
}

@Callable(i)
func step_4()=
if (i.caller != this) then throw("access only by project owner") else
{
    strict ji = invoke(this, "jackpotInvoker", [], []) # up to 99 addresses
    strict pj = invoke(this, "payJackpot", [], [])
    []
}


@Callable(i)
func participants()=
if (i.caller != this) then throw("access only by project owner") else
if getBooleanValue(this, "reset") == false then throw("reset first") else
{
    let list = split_4C(addresses, ",")
    func p(accum:List[String], address:String)=
    if (assetBalance(addressFromStringValue(address), burnxtn) < (tryGetInteger(this, address) + minimumIncrease)) then accum else
    {accum :+ address}
    let participantsList = {FOLD<1000>(list, nil, p)}
    let participantsListString = makeString(participantsList, ",")
    [
    StringEntry(keyParticipants, participantsListString),
    IntegerEntry("list size", size(participantsList))
    ]
}

@Callable(i)
func updateBalanceEntry()=
if (i.caller != this) then throw("access only by project owner") else
if getBooleanValue(this, "reset") == false then throw("reset first") else
{
    let list = split_4C(tryGetString(this, keyParticipants), ",")
    func bal(accum:List[IntegerEntry], address:String)=
    {accum ++ [IntegerEntry(address, assetBalance(addressFromStringValue(address), burnxtn))]}
    let updateBalance = {FOLD<100>(list, nil, bal)}
    [] ++ updateBalance
}

@Callable(i)
func totalBalanceAll()=
if (i.caller != this) then throw("access only by project owner") else
if getBooleanValue(this, "reset") == false then throw("reset first") else
{
    let list = split_4C(tryGetString(this, keyParticipants), ",")
    func ba(accum:Int, address:String)=
    {accum + totalBalance(addressFromStringValue(address))}
    let enterTotalBalanceAll = {FOLD<100>(list, 0, ba)}
    [IntegerEntry("total balance all", enterTotalBalanceAll)]
}

@Callable(i)
func totalBalanceWhirlpoolAll()=
if (i.caller != this) then throw("access only by project owner") else
if getBooleanValue(this, "reset") == false then throw("reset first") else
{
    let list = split_4C(tryGetString(this, keyParticipants), ",")
    func ba(accum:Int, address:String)=
    {accum + totalWhirlpoolBalance(addressFromStringValue(address))}
    let enterTotalBalanceAll = {FOLD<100>(list, 0, ba)}
    [IntegerEntry("total balance Whirlpool all", enterTotalBalanceAll)]
}

@Callable(i)
func winner()=
if (i.caller != this) then throw("access only by project owner") else
if getBooleanValue(this, "reset") == false then throw("reset first") else
{
  strict claimInv = invoke(Address(base58'3PE7NtJdmVq4yo47LKDqurQ8RLDCouvJCPB'), "claimIndexRewards", [], [])    
  let randHash = sha256(rand(i))
  let randHashInt = toInt(randHash)
  let result = if (randHashInt < 0) then (-1 * randHashInt) else (randHashInt)
  [
  BinaryEntry("rand winner", rand(i)),
  BinaryEntry("randhash winner", randHash),
  IntegerEntry("randhash int winner", result),
  IntegerEntry("result remainder winner", result % getIntegerValue("total balance all") + 1)
  ]
}

@Callable(i)
func invoker()= 
if (i.caller != this) then throw("access only by project owner") else{
    let list = split_4C(tryGetString(this, keyParticipants), ",")
    func r(accum:List[Int], address:String)=
    {invoke(this, "winnerAddress", [address], [])}
    strict invoker = {FOLD<100>(list, [], r)}
    []
}

@Callable(i)
func winnerAddress(address:String)=
if (i.caller != this) then throw("access only by project owner") else{
    if (tryGetInteger(this, keyTotalBalanceCount) >= tryGetInteger(this, "result remainder winner")) then [] else
        let count = totalBalance(addressFromStringValue(address))
        if ((tryGetInteger(this, keyTotalBalanceCount) + count) >= tryGetInteger(this, "result remainder winner")) then
        [IntegerEntry(keyTotalBalanceCount, tryGetInteger(this, keyTotalBalanceCount) + count),
        StringEntry("winner address", address)] 
            else [IntegerEntry(keyTotalBalanceCount, tryGetInteger(this, keyTotalBalanceCount) + count)]
}

@Callable(i)
func payWinner()=
if (i.caller != this) then throw("access only by project owner") else{
    strict burnxtnBalanceBefore = assetBalance(this, burnxtn)

    strict swest = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(westId,assetBalance(this, westId))])
    strict svires = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(viresId,assetBalance(this, viresId))])
    strict segg = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(eggId,assetBalance(this, eggId))])
    strict ssurf = invoke(Address(poolId), "swap", [burnxtnString,0], 
    [AttachedPayment(surfId, if assetBalance(this, surfId) - d6 > 0 then assetBalance(this, surfId) - d6 else 0)])
    strict snsbt = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(nsbtId,assetBalance(this, nsbtId))])
    strict swx = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(wxId,assetBalance(this, wxId))])
    strict sswop = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(swopId,assetBalance(this, swopId))])
    strict sxtn = invoke(Address(poolId), "swap", [burnxtnString,0], [AttachedPayment(xtn,assetBalance(this, xtn))])
    strict swapwaves = invoke(Address(poolId), "swap", [burnxtnString,0],
    [AttachedPayment(unit,if wavesBalance(this).available - d8 > 0 then wavesBalance(this).available - d8 else 0)])

    let burnxtnBalanceAfter = assetBalance(this, burnxtn)
    strict prizeAmount = fraction((burnxtnBalanceAfter - burnxtnBalanceBefore), 80, 100)
    let winnerAddress = addressFromStringValue(getStringValue(this, "winner address"))

    let bonus = fraction((burnxtnBalanceAfter - burnxtnBalanceBefore), 10, 100)
    strict bonusAmount = fraction(bonus, totalWhirlpoolBalance(winnerAddress), tryGetInteger(this, "total balance Whirlpool all"))

    let surfBurnAmount = if (assetBalance(this, surfId) < (d6)) then assetBalance(this, surfId) else d6
    let surfBurn = Burn(surfId, surfBurnAmount)

    func foldFunc(acc:Int, WFS:String) = acc + assetBalance((winnerAddress), fromBase58String(WFS))
    let shareWFS = FOLD<10>(WFSlist, 0, foldFunc)
    let WFSbonus = fraction(prizeAmount, 125, 10000)

    func foldFuncB(acc:Int, BBB:String) = acc + assetBalance((winnerAddress), fromBase58String(BBB))
    let shareBBB = FOLD<10>(BBBlist, 0, foldFuncB)
    let BBBbonus = fraction(prizeAmount, 125 * 9, 1000)
    [
    BooleanEntry("reset", false),
    surfBurn,
    IntegerEntry("SURF total burned", tryGetInteger(this, "SURF total burned") + surfBurnAmount),
    IntegerEntry("guaranteed prize", prizeAmount),
    ScriptTransfer(winnerAddress, prizeAmount, burnxtn),
    IntegerEntry("Whirlpool bonus prize", bonusAmount),
    ScriptTransfer(winnerAddress, bonusAmount, burnxtn),
    IntegerEntry("WFS 1.25% NFT bonus", if shareWFS > 0 then WFSbonus else 0),
    ScriptTransfer(winnerAddress, if shareWFS > 0 then WFSbonus else 0, burnxtn),
    IntegerEntry("BBB 11.25% NFT bonus", if shareBBB > 0 then BBBbonus else 0),
    ScriptTransfer(winnerAddress, if shareBBB > 0 then BBBbonus else 0, burnxtn)
    ]
}

@Callable(i)
func jackpot()=
if (i.caller != this) then throw("access only by project owner") else{
  let randHash = sha256(rand(i) + getBinaryValue("randhash winner") )
  let randHashInt = toInt(randHash)
  let result = if (randHashInt < 0) then (-1 * randHashInt) else (randHashInt)
  [
  BinaryEntry("rand jackpot", rand(i)),
  BinaryEntry("randhash jackpot", randHash),
  IntegerEntry("randhash int jackpot", result),
  IntegerEntry("result remainder jackpot", result % 52),
  if(result % 52 == 0) then BooleanEntry("jackpot", true) else BooleanEntry("jackpot", false)
  ]
}

@Callable(i)
func winnerJackpot()=
if (i.caller != this) then throw("access only by project owner") else{
  let randHash = sha256(rand(i) + getBinaryValue("randhash jackpot"))
  let randHashInt = toInt(randHash)
  let result = if (randHashInt < 0) then (-1 * randHashInt) else (randHashInt)
  [
  BinaryEntry("rand winner", rand(i)),
  BinaryEntry("randhash winner", randHash),
  IntegerEntry("randhash int winner", result),
  IntegerEntry("result remainder winner", result % getIntegerValue("total balance all") + 1)
  ]
}

@Callable(i)
func jackpotInvoker()= 
if (i.caller != this) then throw("access only by project owner") else{
    let list = split_4C(tryGetString(this, keyParticipants), ",")
    func r(accum:List[Int], address:String)=
    {invoke(this, "jackpotAddress", [address], [])}
    strict invoker = {FOLD<100>(list, [], r)}
    []
}

@Callable(i)
func jackpotAddress(address:String)=
if (i.caller != this) then throw("access only by project owner") else{
    if (tryGetInteger(this, keyTotalBalanceJackpotCount) >= tryGetInteger(this, "result remainder winner")) then [] else
        let count = totalBalance(addressFromStringValue(address))
        if ((tryGetInteger(this, keyTotalBalanceJackpotCount) + count) >= tryGetInteger(this, "result remainder winner")) then
        [IntegerEntry(keyTotalBalanceJackpotCount, tryGetInteger(this, keyTotalBalanceJackpotCount) + count),
        StringEntry("jackpot address", address)] 
            else [IntegerEntry(keyTotalBalanceJackpotCount, tryGetInteger(this, keyTotalBalanceJackpotCount) + count)]
}

@Callable(i)
func payJackpot()=
if (i.caller != this) then throw("access only by project owner") else
if getBooleanValue("jackpot") == false then throw("no jackpot") else 
{
    strict prizeAmount = fraction(assetBalance(this, burnxtn), 40, 100)
    let bonus = fraction(assetBalance(this, burnxtn), 5, 100)
    strict bonusAmount = fraction(bonus, 
        totalWhirlpoolBalance(addressFromStringValue(getStringValue(this, "jackpot address"))), 
        tryGetInteger(this, "total balance Whirlpool all"))
    let winnerAddress = addressFromStringValue(getStringValue(this, "jackpot address"))

    func foldFunc(acc:Int, WFS:String) = acc + assetBalance((winnerAddress), fromBase58String(WFS))
    let shareWFS = FOLD<10>(WFSlist, 0, foldFunc)
    let WFSbonus = fraction(prizeAmount, 125, 10000)

    func foldFuncB(acc:Int, BBB:String) = acc + assetBalance((winnerAddress), fromBase58String(BBB))
    let shareBBB = FOLD<10>(BBBlist, 0, foldFuncB)
    let BBBbonus = fraction(prizeAmount, 125 * 9, 10000)
    [
    IntegerEntry("jackpot prize", prizeAmount),
    ScriptTransfer(winnerAddress, prizeAmount, burnxtn),
    IntegerEntry("Whirlpool bonus prize", bonusAmount),
    ScriptTransfer(winnerAddress, bonusAmount, burnxtn),
    IntegerEntry("WFS 1.25% NFT bonus", if shareWFS > 0 then WFSbonus else 0),
    ScriptTransfer(winnerAddress, if shareWFS > 0 then WFSbonus else 0, burnxtn),
    IntegerEntry("BBB 11.25% NFT bonus", if shareBBB > 0 then BBBbonus else 0),
    ScriptTransfer(winnerAddress, if shareBBB > 0 then BBBbonus else 0, burnxtn)
    ]
}

@Callable(i)
func reset()=
if (i.caller != this) then throw("access only by project owner") else{
    [
    IntegerEntry(keyTotalBalanceCount, 0),
    IntegerEntry(keyTotalBalanceJackpotCount, 0),
    IntegerEntry(keyTotalBalanceSponsorCount, 0),
    BooleanEntry("jackpot", false),
    BooleanEntry("reset", true)
    ]
}

@Callable(i)
func sponsorWinner()= 
if ((i.caller != this)) then throw("access only by project owner") else{
    let randHash = sha256((rand(i) + getBinaryValue("randhash jackpot")))
    let randHashInt = toInt(randHash)
    let result = if ((0 > randHashInt)) then (-1 * randHashInt) else randHashInt
    let totalSponsor = ((getIntegerValue("total balance all") - totalBalance(addressFromStringValue(tryGetString(this, "winner address")))) - (if ((tryGetString(this, "jackpot address") == "")) then 0 else totalBalance(addressFromStringValue(tryGetString(this, "jackpot address")))))
    [
    BinaryEntry("rand winner", rand(i)), 
    BinaryEntry("randhash winner", randHash), 
    IntegerEntry("randhash int winner", result), 
    IntegerEntry("result remainder winner", ((result % totalSponsor) + 1)), 
    IntegerEntry(keyTotalSponsor, totalSponsor)
    ]
}

@Callable(i)
func sponsorInvoker()= 
if ((i.caller != this)) then throw("access only by project owner") else{
    let list = split_4C(tryGetString(this, keyParticipants), ",")
    let winnerIndex = value(indexOf(list, tryGetString(this, "winner address")))
    let listMinusWinner = removeByIndex(list, winnerIndex)
    func r (accum:List[Int], address:String)= 
    invoke(this, "sponsorWinnerAddress", [address], nil)
    strict invoker = {FOLD<100>(listMinusWinner, [], r)}
    []    
}

@Callable(i)
func sponsorWinnerAddress(address:String)= 
if ((i.caller != this)) then throw("access only by project owner") else 
if ((tryGetInteger(this, keyTotalBalanceSponsorCount) >= tryGetInteger(this, "result remainder winner"))) then nil else{
    let count = totalBalance(addressFromStringValue(address))
    if (((tryGetInteger(this, keyTotalBalanceSponsorCount) + count) >= tryGetInteger(this, "result remainder winner")))
        then [IntegerEntry(keyTotalBalanceSponsorCount, (tryGetInteger(this, keyTotalBalanceSponsorCount) + count)), StringEntry("sponsor winner address", address)]
        else [IntegerEntry(keyTotalBalanceSponsorCount, (tryGetInteger(this, keyTotalBalanceSponsorCount) + count))]
}

@Callable(i)
func paySponsorWinner(amount:Int,assetId:String)= 
if ((i.caller != this)) then throw("access only by project owner") else{
    let winnerAddress = addressFromStringValue(getStringValue(this, "sponsor winner address"))
    let decimals = match assetInfo(fromBase58String(assetId)) 
        {case asset: Asset => asset.decimals
        case _ => throw("Can't find asset")}
        let prizeAmount = amount
    [ScriptTransfer(winnerAddress, prizeAmount, fromBase58String(assetId))]
}

@Callable(i)
func changeIntegerEntry(keyString:String, integer:Int)= 
if (i.caller != this) then throw("access only by project owner") else
    {[IntegerEntry(keyString, integer)]}
