@Callable(i)
func checkTopX()=
if (i.caller != this) then throw("access only by project owner") else{
    strict a = invoke(this, "listHodl", [], [])

    #fold function 50x
    strict b = invoke(this, "topXhighToLow", [], [])

    let list = dropRight(tryGetString(this, "high to low"), 1)
    #let index = containsElement(list, toString(totalBalance(i.caller)))
    []
    }

@Callable(i)
func listHodl()=
if (i.caller != this) then throw("access only by project owner") else
{
    let list = split(addresses, ",")
    func p(accum:List[String], address:String)=
    if (assetBalance(addressFromStringValue(address), burnxtn) < (tryGetInteger(this, address) + minimumIncrease)) then accum else
    {accum :+ address}
    let participantsList = {FOLD<100>(list, nil, p)}
    let participantsListString = makeString(participantsList, ",")
    [StringEntry("topX", participantsListString)]
}

@Callable(i)
func topXhighToLow(iterations:Int)=
if (i.caller != this) then throw("access only by project owner") else{
    let list = split(getStringValue("topX"), ",")
    if size(list) <= 90 then [] else 
    func bal(accum:List[Int], address:String)=
    {accum :+ totalBalance(addressFromStringValue(address))}
    let balList = {FOLD<100>(list, [], bal)}

    let highest = value(max(balList))
    let indexHighest = value(indexOf(balList, highest))
    let minusHighestList = removeByIndex(list, indexHighest)
    let minusHighestString = makeString(minusHighestList, ",")
    [StringEntry("high to low", (tryGetString(this, "high to low") + toString(highest) + ",")),
    StringEntry("topX", minusHighestString)]
}

@Callable(i)
func invokerTopX()=
if (i.caller != this) then throw("access only by project owner") else{
    let list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 
 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95]
    func r(accum:List[Int], iterations:Int)=
    {invoke(this, "topX", [iterations], [])}
    strict remove = {FOLD<95>(list, [], r)}
    []
}

@Callable(i)
func topX(iterations:Int)=
if (i.caller != this) then throw("access only by project owner") else{
    let list = split(getStringValue(keyParticipants), ",")
    if size(list) <= 90 then [] else 
    func bal(accum:List[Int], address:String)=
    {accum :+ totalBalance(addressFromStringValue(address))}
    let balList = {FOLD<100>(list, [], bal)}

    let lowest = value(min(balList))
    let indexLowest = value(indexOf(balList, lowest))
    let minusLowestList = removeByIndex(list, indexLowest)
    let minusLowestString = makeString(minusLowestList, ",")
    [StringEntry(keyParticipants, minusLowestString)]
}
